<?php

defined('BASEPATH') OR exit('No direct script access allowed');

class Erc_reports extends EMS_Controller {

    function __construct() {

        parent::__construct();

        $this->active_module = "M-REPORTS";

        $this->pg_limit = $this->config->item('pagination_limit_clg');

        $this->pg_limits = $this->config->item('report_clg');
        $this->load->model(array('colleagues_model', 'get_city_state_model', 'options_model', 'common_model', 'module_model', 'inc_model', 'amb_model', 'pcr_model', 'hp_model', 'school_model', 'eqp_model', 'inv_model', 'police_model', 'fire_model', 'shiftmanager_model', 'Medadv_model', 'feedback_model', 'grievance_model','call_model','ambmain_model','quality_model','module_model'));
        $this->load->helper(array('form', 'url', 'cookie', 'string', 'date'));
        $this->load->library(array('form_validation', 'encrypt', 'image_lib', 'session', 'email', 'upload', 'modules', 'simple_excel/Simple_excel'));

        $this->post['base_month'] = get_base_month();
        $this->site_name = $this->config->item('site_name');
        $this->site = $this->config->item('site');

        $this->clg = $this->session->userdata('current_user');
    }

    public function index($generated = false) {

        $mcode = 'M-ERC-REPORTS';
        $data['tool_data'] = $this->module_model->get_tools_by_mcode($mcode);
        $this->output->add_to_position($this->load->view('frontend/erc_reports/erc_reports_list_view', $data, TRUE), $this->post['output_position'], TRUE);
    }

    function load_erc_report_form() {

        $report_type = $this->input->post('report_type');
         //var_dump($output_position);
      //  die();

        if ($report_type == 'Incident_Reports') {
            $data['submit_function'] = "dispatch_incident_report";
            $data['report_name'] = "Incident Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/incident_report_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'Closure_Reports') {
            $data['submit_function'] = "save_export_patient";
            $data['report_name'] = "Closure Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/closure_report_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'pda_report') {
            $data['submit_function'] = "save_export_dist_travel";
            $data['report_name'] = "PDA Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/pda_reports_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'fda_report') {
            $data['submit_function'] = "save_export_tans_patient";
            $data['report_name'] = "FDA Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/fda_reports_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'employee_report') {
            $data['submit_function'] = "export_emp_report";
            $data['report_name'] = "Employee Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/login_employee_reports_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'ambulance_report') {
            $data['submit_function'] = "export_emp_report";
            $data['report_name'] = "Ambulance Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ambulance_reports_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'Patient_Transport_Reports') {
            $data['submit_function'] = "patient_transport_reports_view";
            $data['report_name'] = "Patient Transport Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/patient_transport_reports_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'daily_report') {
            $data['submit_function'] = "incident_daily_hourly_report";
            $data['report_name'] = "Hourly Data (Daily Report)";
            $data['all_purpose_of_calls'] = $this->call_model->get_all_child_purpose_of_calls();
            $this->output->add_to_position($this->load->view('frontend/erc_reports/daily_date_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'onroad_offroad_report') {
            $data['submit_function'] = "incident_daily_hourly_report";
            $data['report_name'] = "On-road / Off-road Data Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/onroad_offroad_report_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'ercp_report') {
            $data['submit_function'] = "incident_daily_hourly_report";
            $data['report_name'] = "ERCP Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ercp_reports_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'b12_report') {
            $data['submit_function'] = "incident_daily_hourly_report";
            $data['report_name'] = "B12 Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/b12_reports_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'feedback_report') {
            $data['submit_function'] = "incident_daily_hourly_report";
            $data['report_name'] = "Feedback Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/feedback_reports_view', $data, TRUE), $output_position, TRUE);
        } else if ($report_type == 'grieviance_report') {
            $data['report_name'] = "Grievance Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/grievance_reports_view', $data, TRUE), $output_position, TRUE);
        }else if ($report_type == 'master_report') {
            $data['report_name'] = "Master Report";
           // $data['submit_function'] = "view_master_report";
            $data['all_purpose_of_calls'] = $this->call_model->get_all_child_purpose_of_calls();
            $this->output->add_to_position($this->load->view('frontend/erc_reports/master_reports_view', $data, TRUE), $output_position, TRUE);
        }else if ($report_type == 'quality_master_report') {
            $data['report_name'] = "Quality Master Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/quality_master_reports_view', $data, TRUE), $output_position, TRUE);
        }else if ($report_type == 'call_count_aht_report') {
            $data['submit_function'] = "call_count_aht_report";
            $data['report_name'] = "Call Count/AHT Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/aht_count_filters_report_view', $data, TRUE), $output_position, TRUE);
            
        }else if ($report_type == 'district_wise_patient_served') {
            
            $data['submit_function'] = "district_wise_patient_served";
            $data['report_name'] = "District wise Emergency Patient Served";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_district_patient_reports_view', $data, TRUE), $output_position, TRUE);
            
        }else if($report_type == 'fuel_filling_report'){
            $data['submit_function'] = "fuel_filling";
            $data['report_name'] = "Fuel Filling Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/fuel_filling_reports_view', $data, TRUE), $output_position, TRUE);
          
        }else if ($report_type == 'patient_serverd_count_report') {
            
            $data['submit_function'] = "load_patient_served_sub_option_report_form_new";
            $data['report_name'] = "Patient Served Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/patient_serverd_count_ambulancewise_view', $data, TRUE), $output_position, TRUE);
            
        }else if($report_type == 'unable_to_dispatch_report'){
            $data['submit_function'] = "unable_to_dispatch_report";
            $data['report_name'] = "Unable To Dispatch Report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/unable_to_dispatch_report', $data, TRUE), $output_position, TRUE);
          
        }
    }
    function load_patient_served_sub_option_report_form_new()
    {
        $report_type_new = $this->input->post('report_type_new');
        //var_dump($report_type_new);die();
        $data = array();
        if ($report_type_new == '1') {
            //$data['submit_function'] = "patientserved_report_view";
            $data['report_type_new'] = $report_type_new;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/patient_serverd_count_ambulancewise_view_new', $data, TRUE), 'report_block_fields', TRUE);
        }
        if ($report_type_new == '2') {
            //$data['submit_function'] = "patientserved_report_view";
            $data['report_type_new'] = $report_type_new;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/patient_serverd_count_ambulancewise_view_new', $data, TRUE), 'report_block_fields', TRUE);
        }
        if ($report_type_new == '3') {
            //$data['submit_function'] = "patientserved_report_view";
            $data['report_type_new'] = $report_type_new;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/patient_serverd_count_ambulancewise_view_new', $data, TRUE), 'report_block_fields', TRUE);
        }
    }
    function load_patient_served_sub_option_report_form()
    {
        $report_type = $this->input->post('report_type');
        $report_type_new = $this->input->post('report_type_new');
        //var_dump($report_type_new);die();
        $data = array();
        if ($report_type == '1') {
            $data['submit_function'] = "patientserved_report_view";
            $data['report_type_new'] = $report_type_new;
            $this->output->add_to_position($this->load->view('frontend/reports/export_patientserved_date_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "patientserved_report_view";
            $data['report_type_new'] = $report_type_new;
            $this->output->add_to_position($this->load->view('frontend/reports/export_patientserved_month_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '3') {
            $data['submit_function'] = "patientserved_report_view";
            $data['report_type_new'] =$report_type_new;
            $this->output->add_to_position($this->load->view('frontend/reports/export_patientserved_daily_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '4') {
            $data['submit_function'] = "patient_served_report_days";
            $data['report_type_new'] = $report_type_new;
            $this->output->add_to_position($this->load->view('frontend/reports/export_patientserved_date_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        
    }
   //patient served Report
   function patientserved_report_view(){
    //var_dump('hii');die();
    $post_reports = $this->input->post();
    $report_type_new = $this->input->post('report_type_new');
   //var_dump($post_reports);die();
    if($report_type_new=='2')
    {
       // var_dump('hii');die();
     $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
     $base_month = $this->common_model->get_base_month($from_date);
     $base_month =$base_month[0]->months;

     if ($post_reports['to_date'] != '') {

         $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
             'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
             'base_month' => $base_month
           );
           
     } else if($post_reports['to_date'] != '' && $post_reports['from_date'] != '') {

         $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
             'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
             'base_month' => $base_month
            );
         
     }else{

         $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
             'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
             'base_month' => $base_month
             );
     }
     
    
     $query=$this->ambmain_model->get_ambulance($report_args);
     //var_dump($report_args);die();
     foreach($query as $inc_amb)
     {
         $data = array(
             'from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
             'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
            // 'base_month' => $base_month,
             'amb_rto_register_no'=>$inc_amb->amb_rto_register_no
         );
         $report_data[$inc_amb->amb_rto_register_no]= $this->ambmain_model->get_total_call_count($data);
        //var_dump($report_data);die;
     }
     
     //var_dump($report_data);die();
    $header = array('Sr.No','Ambulance No','Call Assign Count');

      $main_file_name = strtotime($post_reports['from_date']);
      $filename = "Patientserved_" . $main_file_name . ".csv";
      $this->output->set_focus_to = "inc_ref_id";
      if ($post_reports['reports'] == 'view') {

          $data['header'] = $header;
          $data['data'] = $report_data;
          $data['report_args'] = $report_args;
          $data['submit_function'] = 'patientserved_report_view';
          $data['report_type_new'] = $report_type_new;
          $this->output->add_to_position($this->load->view('frontend/erc_reports/patientserved_report_view', $data, TRUE), 'list_table', TRUE);
      } else {
          //var_dump("hii");die();
          $filename = "ambulance_patinetserved_report.csv";
          $fp = fopen('php://output', 'w');
          header('Content-type: application/csv');
          header('Content-Disposition: attachment; filename=' . $filename);
          fputcsv($fp, $header);

          $count = 1;
         
          foreach ($report_data as $key=>$row) {
              $data = array(
                  'Sr.No' => $count,
                  'Ambulance No' => $key,
                  'Assign count' => $row->total_count
                  
              );
              fputcsv($fp, $data);
              $count++;
          }

          fclose($fp);
          exit;
      }
    }
    else if($report_type_new=='1'){
     $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
     $base_month = $this->common_model->get_base_month($from_date);
     $base_month =$base_month[0]->months;

     if ($post_reports['to_date'] != '') {

         $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
             'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
             'base_month' => $base_month
           );
           
     } else if($post_reports['to_date'] != '' && $post_reports['from_date'] != '') {

         $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
             'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
             'base_month' => $base_month
            );
         
     }else{

         $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
             'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
             'base_month' => $base_month
             );
     }
     //var_dump($report_args);die;
     $query=$this->ambmain_model->get_ambulance($report_args);
     foreach($query as $inc_amb)
     {
         $data = array(
             'from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
             'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
            // 'base_month' => $base_month,
             'amb_rto_register_no'=>$inc_amb->amb_rto_register_no
         );
         $report_data[$inc_amb->amb_rto_register_no]= $this->ambmain_model->get_Patient_served_count_ambulancewise($data);
       // var_dump($report_data[$inc_amb->amb_rto_register_no]);die;
     }
     $header = array('Sr.No','Ambulance No','Total Patient served Count');

      $main_file_name = strtotime($post_reports['from_date']);
      $filename = "Patientserved_" . $main_file_name . ".csv";
      $this->output->set_focus_to = "inc_ref_id";
      if ($post_reports['reports'] == 'view') {

          $data['header'] = $header;
          $data['data'] = $report_data;
          $data['report_args'] = $report_args;
          $data['report_type_new'] = $report_type_new;
          $data['submit_function'] = 'patientserved_report_view';
          $this->output->add_to_position($this->load->view('frontend/erc_reports/patientserved_report_view', $data, TRUE), 'list_table', TRUE);
      } else {
          //var_dump("hii");die();
          $filename = "ambulance_patinetserved_report.csv";
          $fp = fopen('php://output', 'w');
          header('Content-type: application/csv');
          header('Content-Disposition: attachment; filename=' . $filename);
          fputcsv($fp, $header);

          $count = 1;

          foreach ($report_data as $key=>$row) {
             $data = array(
                 'Sr.No' => $count,
                 'Ambulance No' => $key,
                  'Assign count' => $row->total_count
                  
              );
              fputcsv($fp, $data);
              $count++;
          }

          fclose($fp);
          exit;
      }
    }
    else{
         
    }
   // var_dump($report_type_new);die();
    
 }
 
 function patient_served_report_days(){
    $post_reports = $this->input->post();
    
    $data['report_type_new']=$report_type_new = $this->input->post('report_type_new');
    $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
    $to_date = date('Y-m-d', strtotime($post_reports['to_date']));
    $base_month = $this->common_model->get_base_month($from_date);
    $base_month =$base_month[0]->months;

    if ($post_reports['to_date'] != '') {

        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
        $to_date = date('Y-m-d', strtotime($post_reports['to_date']));
        $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
            'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
            'base_month' => $base_month);
          
    } else  {

        $to_date = date('Y-m-d', strtotime($post_reports['to_date']));
        $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
            'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
            'base_month' => $base_month);
        
    }
   
    $date_range = $this->createdateRange( $from_date,$to_date);
   // var_dump($date_range);die;
    
    $header = array('Sr.No','Ambulance No');
    
    $ambulance_patient_servered = array();
    $ambulance_data = $this->ambmain_model->get_ambulance($report_args);
    
    //var_dump($ambulance_data);
    
    foreach($date_range as $range){           
        $header[] = $range;
       
       // var_dump($range);die();
    }
    //var_dump($report_type_new);die();
    if($report_type_new == '1') {
        foreach($ambulance_data as $ambu){
            foreach($date_range as $range){           

                $args = array('from_date' => date('Y-m-d', strtotime($range)),
                    'to_date' => date('Y-m-d', strtotime($range)),
                    'amb_rto_register_no'=>$ambu->amb_rto_register_no,
                    'base_month' => $base_month);
                    
                $report_data = $this->ambmain_model->get_Patient_served_count_ambulancewise($args);
                //var_dump($report_data);die;
                
                if(!empty($report_data)){
                        $ambulance_patient_servered[$ambu->amb_rto_register_no][$range]=$report_data->total_count;
                }else{
                    $ambulance_patient_servered[$ambu->amb_rto_register_no][$range]=0;
                }


            }
        }


         $main_file_name = strtotime($post_reports['from_date']);
         $filename = "Patientserved_day" . $main_file_name . ".csv";
         $this->output->set_focus_to = "inc_ref_id";
         if ($post_reports['reports'] == 'view') {

             $data['header'] = $header;
             $data['data'] = $report_data;
             $data['patient_servered'] =$ambulance_patient_servered;
             $data['report_args'] = $report_args;
             $data['submit_function'] = 'patient_served_report_days';
             $this->output->add_to_position($this->load->view('frontend/erc_reports/patientserved_days_report_view', $data, TRUE), 'list_table', TRUE);
         } else {

             $filename = "ambulance_patinetserved_report.csv";
             $fp = fopen('php://output', 'w');
             header('Content-type: application/csv');
             header('Content-Disposition: attachment; filename=' . $filename);
             fputcsv($fp, $header);

             $count = 1;

            foreach ($ambulance_patient_servered as $key=>$reportdata){ 

                $data = array(
                     'Sr.No' => $count,
                     'Ambulance No' => $key  
                );
                foreach($reportdata as $key_d=>$report){
                    $data[$key_d] = $report;
                }


                 fputcsv($fp, $data);
                 $count++;

            }

//             foreach ($report_data as $row) {
//                 
//                 $data = array(
//                     'Sr.No' => $count,
//                     'Ambulance No' => $row->amb_rto_register_no,
//                     'Assign count' => $row->total_count
//                     
//                 );
//                 fputcsv($fp, $data);
//                 $count++;
//             }

             fclose($fp);
             exit;
         }
    }
    else{
        
     foreach($ambulance_data as $ambu){
        foreach($date_range as $range){           

            $args = array('from_date' => date('Y-m-d', strtotime($range)),
                'to_date' => date('Y-m-d', strtotime($range)),
                'amb_rto_register_no'=>$ambu->amb_rto_register_no,
                'base_month' => $base_month);
//var_dump($args);die;
           // $report_data = $this->ambmain_model->get_Patient_served_count_ambulancewise($args);
            $report_data= $this->ambmain_model->get_total_call_count($args);
            //var_dump($report_data);die();
            if(!empty($report_data)){
                    $ambulance_patient_servered[$ambu->amb_rto_register_no][$range]=$report_data->total_count;
            }else{
                $ambulance_patient_servered[$ambu->amb_rto_register_no][$range]=0;
            }

        
        }
    }
   //var_dump($ambulance_patient_servered);

     $main_file_name = strtotime($post_reports['from_date']);
     $filename = "Patient_assign_day" . $main_file_name . ".csv";
     $this->output->set_focus_to = "inc_ref_id";
     if ($post_reports['reports'] == 'view') {

         $data['header'] = $header;
         $data['data'] = $report_data;
         $data['patient_servered'] =$ambulance_patient_servered;
         $data['report_args'] = $report_args;
         $data['submit_function'] = 'patient_served_report_days';
         $this->output->add_to_position($this->load->view('frontend/erc_reports/patientserved_days_report_view', $data, TRUE), 'list_table', TRUE);
     } else {
        
         $filename = "ambulance_patinetserved_report.csv";
         $fp = fopen('php://output', 'w');
         header('Content-type: application/csv');
         header('Content-Disposition: attachment; filename=' . $filename);
         fputcsv($fp, $header);

         $count = 1;
         
        foreach ($ambulance_patient_servered as $key=>$reportdata){ 
            
            $data = array(
                 'Sr.No' => $count,
                 'Ambulance No' => $key  
            );
            foreach($reportdata as $key_d=>$report){
                $data[$key_d] = $report;
            }
            
             fputcsv($fp, $data);
             $count++;
              
        }

//             foreach ($report_data as $row) {
//                 
//                 $data = array(
//                     'Sr.No' => $count,
//                     'Ambulance No' => $row->amb_rto_register_no,
//                     'Assign count' => $row->total_count
//                     
//                 );
//                 fputcsv($fp, $data);
//                 $count++;
//             }

         fclose($fp);
         exit;
     }
        
    }
}
    function load_onroad_offroad_form() {
        $report_type = $this->input->post('onroad_report_type');


        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "save_export_tans_patient";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ambulance_onroad_offroad_details_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "save_export_tans_patient";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ambulance_onroad_offroad_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }
    }

    function amb_onroad_report_form() {

        $report_type = $this->input->post('offroad_report_type');


        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "amb_district_onroad_offroad_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "amb_district_onroad_offroad_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }

        if ($report_type === '3') {
            $data['submit_function'] = "amb_district_onroad_offroad_report";
            $data['district_data'] = $this->common_model->get_district();
            $this->output->add_to_position($this->load->view('frontend/erc_reports/district_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
    }

    function details_amb_onroad_report_form() {

        $report_type = $this->input->post('details_report_type');


        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "details_amb_onroad_offroad_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "details_amb_onroad_offroad_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }

        if ($report_type === '3') {
            $data['submit_function'] = "details_amb_onroad_offroad_report";
            $data['district_data'] = $this->common_model->get_district();
            $this->output->add_to_position($this->load->view('frontend/erc_reports/district_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
    }

    function patient_report_form() {
        $report_type = $this->input->post('ptn_report_type');


        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "save_export_tans_patient";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "save_export_tans_patient";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }
    }

    function ercp_report_form() {

        $report_type = $this->input->post('ercp_report_type');

        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "save_export_ercp_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "save_export_ercp_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }
    }

    function hourly_report_form() {

        $report_type = $this->input->post('ercp_report_type');

        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "incident_daily_hourly_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/single_date_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "incident_weekly_hourly_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }
    }
    
    function b12_report_form() {

        $report_type = $this->input->post('b12_report_type');

        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "b12_type_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "b12_type_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
    }

    function feedback_report_form() {

        $report_type = $this->input->post('feedback_report_type');

        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "feedback_type_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "feedback_type_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
    }

    function grievance_report_form() {

        $report_type = $this->input->post('grievance_report_type');

        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "grievance_type_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "grievance_type_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
    }
    function load_maintenance_sub_report_form(){
        $report_type = $this->input->post('maintenance_type'); 
        $data['maintenance_type']= $report_type;
       $data['submit_function'] = "load_incident_sub_date_report_form";
        $this->output->add_to_position($this->load->view('frontend/reports/maintenance_sub_report_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        $this->output->add_to_position('', 'Sub_date_report_block_fields', TRUE);
        $this->output->add_to_position('', 'list_table', TRUE);
      
        
    }
    
    function load_incident_subreport_form() {
        $report_type = $this->input->post('report_type');

        if ($report_type == '1') {
            $data['submit_function'] = "load_incident_sub_date_report_form";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/incident_sub_report_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_date_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "load_other_incident_date_report_form";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/incident_sub_other_report_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_date_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
    }
    function load_shift_roster_sub_option_report_form()
    {
        $report_type = $this->input->post('report_type');
        //var_dump($report_type);die;
        if ($report_type == '1') {
            $data['submit_function'] = "shift_roster_report_view";
            $this->output->add_to_position($this->load->view('frontend/reports/export_shiftroster_date_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "shift_roster_report_view";
            $this->output->add_to_position($this->load->view('frontend/reports/export_shiftroster_month_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '3') {
            $data['submit_function'] = "shift_roster_report_view";
            $this->output->add_to_position($this->load->view('frontend/reports/export_shiftroster_daily_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
            //$this->output->add_to_position('', 'Sub_date_report_block_fields', TRUE);
           // $this->output->add_to_position('', 'list_table', TRUE);
        }
        
    }

    function load_closure_subreport_form() {

        $report_type = $this->input->post('closure_report_type');

        if ($report_type === '1') {
            $data['submit_function'] = "load_closure_report";
        }

        if ($report_type === '2') {
            $data['submit_function'] = "load_response_time_report";
        }

        if ($report_type === '3') {
            $data['submit_function'] = "load_consumable_report";
        }
        $this->output->add_to_position($this->load->view('frontend/erc_reports/closure_sub_report_view', $data, TRUE), 'Sub_report_closure_block_fields', TRUE);
        $this->output->add_to_position('', 'Sub_date_report_block_fields', TRUE);
        $this->output->add_to_position('', 'list_table', TRUE);
    }

    function load_login_employee_report_form() {

        $report_type = $this->input->post('emp_report_type');

        if ($report_type === '1') {
            $data['submit_function'] = "load_employee_report_form";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/employee_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_employee_report_block_fields', TRUE);
             $this->output->add_to_position('', 'user_employee_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "load_employee_login_logout_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/employee_login_logout_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_employee_report_block_fields', TRUE);
             $this->output->add_to_position('', 'user_employee_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }

        if ($report_type === '3') {
            $data['submit_function'] = "load_employee_break_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/employee_breaks_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_employee_report_block_fields', TRUE);
             $this->output->add_to_position('', 'user_employee_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }

        if ($report_type === '4') {
            $data['submit_function'] = "load_employee_calls_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/system_filter_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_employee_report_block_fields', TRUE);
             $this->output->add_to_position('', 'user_employee_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
    }

    function ambulance_report_form() {

        $report_type = $this->input->post('amb_report_type');

        if ($report_type === '1') {
            $data['submit_function'] = "load_ambulance_district_report_form";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ambulance_sub_report_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_ambulance_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "load_ambulance_report_form";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ambulance_sub_report_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_ambulance_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }

        if ($report_type === '3') {
            $data['submit_function'] = "load_ambulance_distance_travel_report_form";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ambulance_sub_report_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_ambulance_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
    }

    function load_ambulance_report_form() {

        $report_type = $this->input->post('amb_type');
        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "ambulance_report_form_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_ambulance_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "ambulance_report_form_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_ambulance_report_block_fields', TRUE);
        }
    }

    function load_ambulance_distance_travel_report_form() {

        $report_type = $this->input->post('amb_type');
        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "ambulance_distance_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_ambulance_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "ambulance_distance_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_ambulance_report_block_fields', TRUE);
        }
    }

    function load_ambulance_district_report_form() {

        $report_type = $this->input->post('amb_type');
        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "export_district_wise";
            $data['district_data'] = $this->common_model->get_district();
            $this->output->add_to_position($this->load->view('frontend/erc_reports/district_filter_view', $data, TRUE), 'Sub_ambulance_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "export_district_wise";
            $data['district_data'] = $this->common_model->get_district();
            $this->output->add_to_position($this->load->view('frontend/erc_reports/district_month_filter_view', $data, TRUE), 'Sub_ambulance_report_block_fields', TRUE);
        }
    }

    function load_employee_report_form() {

        $report_type = $this->input->post('employee_report_type');
         $data = array();
        $data['report_type'] =$report_type;
        if ($report_type === '1') {
            $data['submit_function'] = "load_employee_department_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/department_reports_view', $data, TRUE), 'Sub_employee_report_block_fields', TRUE);
        }
    }
    function load_employee_wise_report_form() {

        $report_type = $this->input->post('employee_report_type');
        $data = array();
        $data['department_name'] = $this->input->post('department_name');
        $data['report_type'] =$report_type;
        //var_dump($data);
        $data['tl_data'] = $this->colleagues_model->get_all_eros(array('team_type' => $data['department_name']));

        if ($report_type === '1') {
            $data['submit_function'] = "load_employee_department_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/user_department_reports_view', $data, TRUE), 'user_employee_report_block_fields', TRUE);
        }
        if ($report_type === '2') {
            $data['submit_function'] = "login_logout_single_date_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/user_department_reports_view', $data, TRUE), 'user_employee_report_block_fields', TRUE);
        }
         if ($report_type === '3') {
            $data['submit_function'] = "break_single_date_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/user_department_reports_view', $data, TRUE), 'user_employee_report_block_fields', TRUE);
        }
    }

    function load_employee_login_logout_report() {

        $report_type = $this->input->post('log_emp_report_type');
       
        $data = array();
        
        if ($report_type === '1') {
            //$report_type = $this->input->post('employee_report_type');
            $data['report_type'] ='2';
            $data['submit_function'] = "login_logout_single_date_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/department_reports_view', $data, TRUE), 'Sub_employee_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "login_logout_single_date_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/single_date_view', $data, TRUE), 'Sub_employee_report_block_fields', TRUE);
        }
    }

    function load_employee_calls_report() {
       $data = array();
       $data['system'] = $this->input->post('system');
       $report_type=$this->input->post('report_type');
       $data['submit_function'] = "calls_date_report";
       $data['tl_data'] = $this->colleagues_model->get_all_eros(array('system' => $data['system'])); 
       $data['all_clg'] = $this->colleagues_model->get_all_ero($args);
        $this->output->add_to_position($this->load->view('frontend/erc_reports/ero_name_view', $data, TRUE), 'user_employee_report_block_fields', TRUE);
          }

    function calls_date_report() {
   
        $post_reports = $this->input->post();
       //var_dump($post_reports);die;
        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']
            );
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']
            );
        }



        $header = array('No','Call Type','Total Counts');

        $report_data =$this->call_model->get_all_child_purpose_of_calls();
        
        $data['report_args'] = $report_args;
        $user_id= $data['user_id'] = $post_reports['user_id'];
        $system= $data['system'] = $post_reports['system'];

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            if(isset($report_data)){
            foreach ($report_data as $row) {

                $inc_data[] = array(
                   'pcode'=>$row->pcode,
                    'pname' => ucwords($row->pname)
                    
                );
            }}
          

            $data['header'] = $header;
           $data['inc_data'] = $inc_data;

        //var_dump($system);die;
            $data['submit_funtion'] = 'calls_date_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/emp_call_list_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "call_status_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
           
        //    echo $calls_total;die;
        
            $count = 1;
            $calls_total1= 0;
            
            foreach ($report_data as $row) { 

                $user_id =$post_reports['ref_id']; 
//                if($post_reports['system_type'] == 'UG-ERO-102'){
//                   $system = '102';
//                }else if($post_reports['system_type'] == 'UG-ERO-102'){
//                   $system = '108'; 
//                }else{
//                    $system = 'all_clg';
//                }
                
                $calls_total= get_total_by_call_type($user_id,$row->pcode,$dur="ft",$report_args['from_date'],$report_args['to_date'],$system);
              
                if($calls_total != '' && $calls_total != null){
                    $calls_total1 =$calls_total;
                    
                }else{
                    $calls_total1 = "0";
                }
                $call_total =$call_total+$calls_total1;
                
                $inc_data = array(
                    'Sr.No' => $count,
                    'Call Type' => ucwords($row->pname) ,
                    'Total Counts' =>$calls_total1
                );
                
                fputcsv($fp, $inc_data);
                $count++;
            }
            $post_reports = $this->input->post();
            $user_id= $data['user_id'] = $post_reports['user_id'];
            $system= $data['system'] = $post_reports['system'];
            if ($post_reports['to_date'] != '') {
                $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                    'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                    'base_month' => $this->post['base_month']
                );
            } else {
                $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                    'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                    'base_month' => $this->post['base_month']
                );
            }
            
            //var_dump($calls_total);die;
            $calls_total= get_total_by_call_type($user_id,$row->pcode="",$dur="ft",$report_args['from_date'],$report_args['to_date'],$system);
            $total = array('','Total',$calls_total);
           //var_dump($calls_total);die;
            fputcsv($fp,$total);
           fclose($fp);
            exit;
        }
    }

    function calls_date_filter_report() {

        $report_type = $this->input->post('user_id');
       
        
        if ($report_type == '1') {
            $data['submit_function'] = "load_incident_sub_date_report_form";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/incident_sub_report_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_date_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "load_other_incident_date_report_form";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/incident_sub_other_report_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_date_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
    }
    
    function load_employee_breaks_report() {

        $report_type = $this->input->post('log_emp_report_type');
        $data['user_id'] = $this->input->post('user_id');
        $data['report_type'] =$report_type;
        $data = array();
        if ($report_type === '1') {
            $data['report_type'] ='3';
            $data['submit_function'] = "break_single_date_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/department_reports_view', $data, TRUE), 'Sub_employee_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "break_single_date_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/single_date_view', $data, TRUE), 'Sub_employee_report_block_fields', TRUE);
        }
    }
    function fuel_filling()
    {
        $report_type = $this->input->post('report_type');
        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "load_fuel_filling_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "load_fuel_filling_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }
    }
    function unable_to_dispatch() {
        $report_type = $this->input->post('report_type');
        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "unable_to_dispatch_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "unable_to_dispatch_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }
    }
    function load_pda_report_form() {

        $report_type = $this->input->post('police_report_type');
        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "load_pda_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "load_pda_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '3') {
            $data['submit_function'] = "load_pda_district_report";
            $data['district_data'] = $this->common_model->get_district();
            $this->output->add_to_position($this->load->view('frontend/erc_reports/district_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }
    }

    function load_fire_report_form() {

        $report_type = $this->input->post('fire_report_type');
        $data = array();
        if ($report_type === '1') {
            $data['submit_function'] = "load_fire_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '2') {
            $data['submit_function'] = "load_fire_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }

        if ($report_type === '3') {
            $data['submit_function'] = "load_fire_district_report";
            $data['district_data'] = $this->common_model->get_district();
            $this->output->add_to_position($this->load->view('frontend/erc_reports/district_reports_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
        }
    }

    function load_closure_report() {
        $report_type = $this->input->post('date_report_type');
        if ($report_type == '1') {
            $data['submit_function'] = "closure_dco_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "closure_dco_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
    }

    function load_response_time_report() {
        $report_type = $this->input->post('date_report_type');
        if ($report_type == '1') {
            $data['submit_function'] = "closure_response_time_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "closure_response_time_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
    }

    function load_consumable_report() {
        $report_type = $this->input->post('date_report_type');
        if ($report_type == '1') {
            $data['submit_function'] = "closure_consumable_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "closure_consumable_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
    }
    function load_maintenance_sub_date_report_form()
    {
        $report_type = $this->input->post('report_type');
        $maintenance_type = $this->input->post('maintenance_type');
        if ($report_type == '1') {
            $data['submit_function'] = "ambulance_maintenance_report";
            $data['maintenance_type'] = $maintenance_type;
            $this->output->add_to_position($this->load->view('frontend/reports/export_maintenance_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "ambulance_maintenance_report";
            $data['maintenance_type'] = $maintenance_type;
            $this->output->add_to_position($this->load->view('frontend/reports/export_main_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        
    }
    function load_incident_sub_date_report_form() {
        $report_type = $this->input->post('report_type');
        if ($report_type == '1') {
            $data['submit_function'] = "dispatch_incident_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "dispatch_incident_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
    }

    function load_other_incident_date_report_form() {
        $report_type = $this->input->post('report_type');
        if ($report_type == '1') {
            $data['submit_function'] = "other_incident_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_inc_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
        if ($report_type == '2') {
            $data['submit_function'] = "other_incident_report";
            $this->output->add_to_position($this->load->view('frontend/erc_reports/export_amb_reports_view', $data, TRUE), 'Sub_date_report_block_fields', TRUE);
        }
    }

    function incident_daily_hourly_report() {

        $post_reports = $this->input->post();
        // var_dump($post_reports);die;


        $from_date = date('Y-m-d', strtotime($post_reports['single_date']));
        $data['single_date'] = $post_reports['single_date'];

        $report_args = array('from_date' => $from_date,
            'to_date' => date('Y-m-d', strtotime($post_reports['single_date'])),
            'system'=>$post_reports['system'],
            'inc_type'=> $post_reports['call_purpose']);




        $report_data = $this->inc_model->get_inc_call_details_ref_id($report_args);
        //var_dump($report_data);
       // die();

        $epcr_report_args = array('from_date' => $from_date,
            'to_date' => date('Y-m-d', strtotime($post_reports['single_date'])),
            'base_month' => $this->post['base_month'],
            'inc_type'=> $post_reports['call_purpose']
            );



        //$epcr_report_data = $this->inc_model->get_epcr_by_hourly($epcr_report_args);



        //$header = array('Hour', 'Total call', 'Total Dispatch', 'Total Closure');
        $header = array('Hour', 'Total Call Count', 'EM Call Count', 'Non EM Call Count');



        $daily_report_array = array();
     $hours_key_array = array('0' => '00:00-01:00',
            '1' => '01:00-02:00',
            '2' => '02:00-03.00',
            '3' => '03.00-04.00',
            '4' => '04.00-05.00',
            '5' => '05.00-06.00',
            '6' => '06.00-07.00',
            '7' => '07.00-08.00',
            '8' => '08.00-09.00',
            '9' => '09.00-10.00',
            '10' => '10.00-11.00',
            '11' => '11.00-12.00',
            '12' => '12.00-13.00',
            '13' => '13.00-14.00',
            '14' => '14.00-15.00',
            '15' => '15.00-16.00',
            '16' => '16.00-17.00',
            '17' => '17.00-18.00',
            '18' => '18.00-19.00',
            '19' => '19.00-20.00',
            '20' => '20.00-21.00',
            '21' => '21.00-22.00',
            '22' => '22.00-23.00',
            '23' => '23.00-24.00');


        $eme_type = array('MCI','mci','non-mci','NON_MCI','inter-hos','IN_HO_P_TR','AD_SUP_REQ','VIP_CALL','PREGANCY_CARE_CALL','PREGANCY_CALL','Child_CARE_CALL','DROP_BACK_CALL','Child_CARE');
        if($report_data){
            foreach ($report_data as $report) {
                $hour = date('G', strtotime($report->inc_datetime));
                $daily_report_array[$hour]['total_inc'][] = $report->inc_ref_id;
                if ($report->incis_deleted == 0) {
                
                    if (in_array($report->inc_type, $eme_type)){
                        $daily_report_array[$hour]['dispatch_inc'][] = $report->inc_ref_id;
                    }else{
                        $daily_report_array[$hour]['epcr_inc'][] = $report->inc_ref_id;
                    }
                    
                    
                }
            }
        }
        


//        if($epcr_report_data){
//            foreach ($epcr_report_data as $epcr_report) {
//
//    //            var_dump($epcr_report);
//
//                $hour = date('G', strtotime($epcr_report['time']));
//                $daily_report_array[$hour]['epcr_inc'][] = $epcr_report['inc_ref_id'];
//            }
//        }
//        // var_dump($daily_report_array); 
//        ksort($daily_report_array);
        
        $data['daily_function']="incident_daily_hourly_report";

        if ($post_reports['reports'] == 'view') {


            $inc_data = array();

            $data['header'] = $header;
            //$daily_report_array = ksort($daily_report_array);
            //var_dump($daily_report_array);
            $data['hours_key_array'] = $hours_key_array;
            $data['daily_report_array'] = $daily_report_array;
            $data['report_args'] = $report_args;
            $this->output->add_to_position($this->load->view('frontend/reports/incident_daily_hourly_report_view', $data, TRUE), 'list_table1', TRUE);
        } else {


            $filename = "incident_daily_hourly_report.csv";
            $fp = fopen('php://output', 'w');




            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);



            $data = array();
            $total_inc= 0;
            $epcr_inc_total= 0;
             $dispatch_inc_total= 0;

            for ($hh = 0; $hh < 24; $hh++) {
                //foreach($daily_report_array as $key=>$daily_report){
                
                $total_call= 0;
                $epcr_inc= 0;
                $dispatch_inc= 0;

                if( !empty($daily_report_array[$hh]['total_inc'])){
                    $total_call= count($daily_report_array[$hh]['total_inc']);
                    $total_inc = $total_inc + $total_call;
                }
                if( !empty($daily_report_array[$hh]['epcr_inc'])){
                    $epcr_inc= count($daily_report_array[$hh]['epcr_inc']);
                    $epcr_inc_total = $epcr_inc_total + $epcr_inc;
                }
                if( !empty($daily_report_array[$hh]['dispatch_inc'])){
                    $dispatch_inc= count($daily_report_array[$hh]['dispatch_inc']);
                    $dispatch_inc_total = $dispatch_inc_total + $dispatch_inc;
                }
                

                $inc_data = array(
                    'Hour' => $hours_key_array[$hh],
                    'total_call' => $total_call,
                    'total_dispatch' => $dispatch_inc,
                    'total_closer' => $epcr_inc,
                );

                fputcsv($fp, $inc_data);
            }
            $total = array('Total', $total_inc,$dispatch_inc_total,$epcr_inc_total);
            fputcsv($fp, $total);



            fclose($fp);
            exit;
        }
         if($post_reports['flt'] == 'reset'){
            $data = array();
            $data['submit_function'] = "incident_daily_hourly_report";
            $data['report_name'] = "Hourly Data (Daily Report)";
            $data['all_purpose_of_calls'] = $this->call_model->get_all_child_purpose_of_calls();
            $data['hours_key_array'] = array();
            $data['daily_report_array'] = array();
            $data['report_args'] = array();
            $data['days'] = $days;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/daily_date_view', $data, TRUE), 'popup_div', TRUE);
            //$this->output->add_to_position('', 'list_table', TRUE);
          //  return;
        }
    }

    function incident_weekly_hourly_report() {

        $post_reports = $this->input->post();
        // var_dump($post_reports);die;



        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
        $to_date = date('Y-m-d', strtotime($post_reports['to_date']));
        
        $date1= new DateTime($from_date);
        $date2= new DateTime($to_date);
        $diff=date_diff($date1,$date2);
        $days= $diff->format("%a");
        

        $report_args = array('from_date' => $from_date,
            'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
            'inc_type'=> $post_reports['call_purpose'],
            'system'=> $post_reports['system'],
        );




        $report_data = $this->inc_model->get_inc_call_details_ref_id($report_args);

        $epcr_report_args = array('from_date' => $from_date,
            'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
            'base_month' => $this->post['base_month'],
            'inc_type'=> $post_reports['call_purpose']
            );



        //$epcr_report_data = $this->inc_model->get_epcr_by_hourly($epcr_report_args);



        $header = array('Hour', 'Total Call Count', 'EM Call Count', 'Non EM Call Count');

        $daily_report_array = array();
        $hours_key_array = array('0' => '00:00-01:00',
            '1' => '01:00-02:00',
            '2' => '02:00-03.00',
            '3' => '03.00-04.00',
            '4' => '04.00-05.00',
            '5' => '05.00-06.00',
            '6' => '06.00-07.00',
            '7' => '07.00-08.00',
            '8' => '08.00-09.00',
            '9' => '09.00-10.00',
            '10' => '10.00-11.00',
            '11' => '11.00-12.00',
            '12' => '12.00-13.00',
            '13' => '13.00-14.00',
            '14' => '14.00-15.00',
            '15' => '15.00-16.00',
            '16' => '16.00-17.00',
            '17' => '17.00-18.00',
            '18' => '18.00-19.00',
            '19' => '19.00-20.00',
            '20' => '20.00-21.00',
            '21' => '21.00-22.00',
            '22' => '22.00-23.00',
            '23' => '23.00-24.00');

        $eme_type = array('MCI','mci','non-mci','NON_MCI','inter-hos','IN_HO_P_TR','AD_SUP_REQ','VIP_CALL');
        if($report_data){
            foreach ($report_data as $report) {
                $hour = date('G', strtotime($report->inc_datetime));
                $daily_report_array[$hour]['total_inc'][] = $report->inc_ref_id;
                if ($report->incis_deleted == 0) {
                
                    if (in_array($report->inc_type, $eme_type)){
                        $daily_report_array[$hour]['dispatch_inc'][] = $report->inc_ref_id;
                    }else{
                        $daily_report_array[$hour]['epcr_inc'][] = $epcr_report->inc_ref_id;
                    }
                    
                }
            }
        }

//        if($epcr_report_data){
//            foreach ($epcr_report_data as $epcr_report) {
//
//    //            var_dump($epcr_report);
//
//                $hour = date('G', strtotime($epcr_report['time']));
//                $daily_report_array[$hour]['epcr_inc'][] = $epcr_report['inc_ref_id'];
//            }
//        }
         //var_dump($daily_report_array); 
      //  ksort($daily_report_array);
        $data['daily_function']="incident_weekly_hourly_report";

        if ($post_reports['reports'] == 'view') {


            $inc_data = array();

            $data['header'] = $header;
            //$daily_report_array = ksort($daily_report_array);
            //var_dump($daily_report_array);
            $data['hours_key_array'] = $hours_key_array;
            $data['daily_report_array'] = $daily_report_array;
            $data['report_args'] = $report_args;
            $data['days'] = $days;
                // var_dump($days);
            

            $this->output->add_to_position($this->load->view('frontend/reports/incident_daily_weekly_report_view', $data, TRUE), 'list_table1', TRUE);
            
        } else {


            $filename = "incident_daily_weekly_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $data = array();
            
            $total_inc= 0;
            $epcr_inc_total= 0;
             $dispatch_inc_total= 0;

            for ($hh = 0; $hh < 24; $hh++) {
                //foreach($daily_report_array as $key=>$daily_report){
                
                $total_call= 0;
                $epcr_inc= 0;
                $dispatch_inc= 0;
                $total_call_avg= 0;
                $epcr_inc_avg= 0;
                $dispatch_inc_avg= 0;

                if( !empty($daily_report_array[$hh]['total_inc'])){
                    $total_call= count($daily_report_array[$hh]['total_inc']);
                    if($days > 0){
                    $total_call_avg = round(((int)$total_call/(int)$days),2);
                    }else{
                        $total_call_avg = 0;
                    }
                    $total_inc = $total_inc + $total_call;
                }
                if( !empty($daily_report_array[$hh]['epcr_inc'])){
                    $epcr_inc= count($daily_report_array[$hh]['epcr_inc']);
                    $epcr_inc_avg = round(((int)$epcr_inc/(int)$days),2);
                    $epcr_inc_total = $epcr_inc_total + $epcr_inc;
                }
                if( !empty($daily_report_array[$hh]['dispatch_inc'])){
                    $dispatch_inc= count($daily_report_array[$hh]['dispatch_inc']);
                    $dispatch_inc_avg = round(((int)$dispatch_inc/(int)$days),2);
                    $dispatch_inc_total = $dispatch_inc_total + $dispatch_inc;
                }
                

//                $inc_data = array(
//                    'Hour' => $hours_key_array[$hh],
//                    'total_call' =>$total_call,
//                    'total_dispatch' => $dispatch_inc,
//                    'total_closer' => $epcr_inc,
//                );
                     $inc_data = array(
                    'Hour' => $hours_key_array[$hh],
                    'total_call' => $total_call,
                    'total_dispatch' => $dispatch_inc,
                    'total_closer' => $epcr_inc,
                );

                fputcsv($fp, $inc_data);
            }
//            $total_inc =round(((int)$total_inc/(int)$days),2);
//            $dispatch_inc_total =round(((int)$dispatch_inc_total/(int)$days),2);
//            $epcr_inc_total =round(((int)$epcr_inc_total/(int)$days),2);
            $total = array('Total', $total_inc,$dispatch_inc_total,$epcr_inc_total);
            fputcsv($fp, $total);
            fclose($fp);
            exit;
        }
         
        if($post_reports['flt'] == 'reset'){
            $data = array();
            $data['submit_function'] = "incident_weekly_hourly_report";
            $data['report_name'] = "Hourly Data (Daily Report)";
            $data['all_purpose_of_calls'] = $this->call_model->get_all_child_purpose_of_calls();
            $data['hours_key_array'] = array();
            $data['daily_report_array'] = array();
            $data['report_args'] = array();
            $data['days'] = $days;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/daily_date_view', $data, TRUE), 'popup_div', TRUE);
            //$this->output->add_to_position('', 'list_table', TRUE);
          //  return;
        }
    }
    function feedback_type_report() {

        $post_reports = $this->input->post();

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']
            );
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']
            );
        }



        $header = array('Incident Id', 'Incident Date/Time', 'Caller No.', 'Caller Name', 'Call Type', 'Feedback Type', 'Standard Remark', 'Employee Remark');

        $report_data = $this->feedback_model->get_feedback_reports($report_args);
      // var_dump($report_args);die;
        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {
                
                $stanadard_remark ='';
                if (!empty($row->fc_standard_type)) {
                    $standard = json_decode($row->fc_standard_type);
                    $stanadard_remarks = array();
                    foreach ($standard as $remark) {
                        if($remark != ''){
                            $st_args = array('fdsr_id' => $remark);
                            $report_data = $this->call_model->get_feedback_stand_remark($st_args);
                            $stanadard_remarks[] = $report_data[0]->fdsr_type;
                        }
                    }
                    $stanadard_remark = implode(', ', $stanadard_remarks);
                }
                $inc_data[] = array(
                    'inc_ref_id' => $row->inc_ref_id,
                    'fc_call_type' => ucwords($row->fc_call_type),
                    'ptn_gender' => $row->fc_ptn_gender,
                    'fc_feedback_type' => $row->fc_feedback_type,
                    'fc_standard_type' => $stanadard_remark,
                    'fc_employee_remark' => $row->fc_employee_remark,
                    'clr_mobile' => $row->fc_caller_number,
                    'clr_fullname' => ucwords($row->fc_caller_name),
                    'inc_datetime' => $row->inc_datetime,
                    'fdsr_type' => $row->fdsr_type[0]
                );
            }

           //var_dump($inc_data);die;
            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'feedback_type_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/feedback_inc_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "feedback_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();

            foreach ($report_data as $row) {

                if ($row->fc_feedback_type == 'negative_feedback') {
                    $type = 'Negative Feedback';
                } else {
                    $type = 'Positive Feedback';
                }
                  $stanadard_remark ='';
                if (!empty($row->fc_standard_type)) {
                    $standard = json_decode($row->fc_standard_type);
                    $stanadard_remarks = array();
                    foreach ($standard as $remark) {

                        $st_args = array('fdsr_id' => $remark);
                        $report_data = $this->call_model->get_feedback_stand_remark($st_args);
                        $stanadard_remarks[] = $report_data[0]->fdsr_type;
                    }
                    $stanadard_remark = implode(', ', $stanadard_remarks);
                }


                $inc_data = array(
                    'inc_ref_id' => $row->inc_ref_id,
                    'inc_datetime' => $row->inc_datetime,
                    'clr_mobile' => $row->fc_caller_number,
                    'clr_fullname' => ucwords($row->fc_caller_name),
                    'fc_call_type' => ucwords($row->fc_call_type),
                    'fc_feedback_type' => $type,
                    //'fc_call_type' => ucwords($type),
                    //'fc_feedback_type' => $row->fc_feedback_type,
                    'fc_standard_type' => $stanadard_remark,
                    'fc_employee_remark' => $row->fc_employee_remark,
                );
                fputcsv($fp, $inc_data);
            }

            fclose($fp);
            exit;
        }
    }

    function grievance_type_report() {

        $post_reports = $this->input->post();

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']
            );
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']
            );
        }



        $header = array('Date & Time', 'Complaint Register No', 'Complaint type', 'Status', 'Complaint close date', 'Complaint added by', 'Complaint close by');

        $report_data = $this->grievance_model->get_inc_by_grievance($report_args);

//        var_dump($report_data);
//        die();

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {

                $inc_data[] = array(
                    'gc_date_time' => $row->gc_date_time,
                    'gc_inc_ref_id' => $row->gc_inc_ref_id,
                    'gc_caller_number' => $row->gc_caller_number,
                    'dst_name' => $row->dst_name,
                    'gc_complaint_type' => $row->gc_complaint_type,
                    'gc_closure_status' => $row->gc_closure_status,
                    'gc_added_by' => $row->gc_added_by,
                    'gc_close_by' => $row->gc_close_by,
                    'gc_closed_date' => $row->gc_closed_date,
                );
            }


            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'grievance_type_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/grievance_inc_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "grievance_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();

            foreach ($report_data as $row) {

                if ($row->gc_complaint_type == 'e-complaint') {
                    $comp_type = "E Complaint";
                } else if ($row->gc_complaint_type == 'negative_news') {
                    $comp_type = "Negative News";
                } else if ($row->gc_complaint_type == 'external') {
                    $comp_type = "External";
                } else if ($row->gc_complaint_type == 'internal') {
                    $comp_type = "Internal";
                }

                if ($row->gc_closure_status == 'complaint_pending') {
                    $status = "Complaint Pending";
                } else if ($row->gc_closure_status == 'complaint_close') {
                    $status = "Complaint Close";
                } else if ($row->gc_closure_status == 'complaint_open') {
                    $status = "Complaint Open";
                }

                if ($row->gc_closed_date == '' || $row->gc_closed_date == '0000-00-00 00:00:00') {
                    $date = "-";
                } else {
                    $date = $row->gc_closed_date;
                }
                if ($row->gc_close_by == '') {
                    $close = "-";
                } else {
                    $close = $row->gc_close_by;
                }

                $inc_data = array(
                    'gc_date_time' => $row->gc_date_time,
                    'gc_inc_ref_id' => $row->gc_inc_ref_id,
                    'gc_complaint_type' => $comp_type,
                    'gc_closure_status' => $status,
                    'gc_closed_date' => $date,
                    'gc_added_by' => $row->gc_added_by,
                    'gc_close_by' => $close
                );

                fputcsv($fp, $inc_data);
            }

            fclose($fp);
            exit;
        }
    }

    function b12_type_report() {

        $post_reports = $this->input->post();
       
           //var_dump($post_reports);die;
//        $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
//            'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
//            'base_month' => $this->post['base_month'],
//            'district' => 'other');

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month'],
                'district' => $post_reports['district']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month'],
                'district' => $post_reports['district']);
        }
//var_dump($report_args);die;
$district = $post_reports['district'];
        $incient_district = $this->inc_model->get_district_by_id($district);
        $dst_name = $incient_district->dst_name;

       // $incient_district = $this->inc_model->get_district_by_id($district);
        $dst_name = $incient_district->dst_name;
        $data['district_id']=$district;
        $data['dist_name']=$dst_name;
        //$data['dist_name']=$dst_name;
       // $district = $post_reports['district'];
        
       // $incient_district = $this->inc_model->get_district_by_id($district);
      //  $dst_name = $incient_district->dst_name;
       // $data['district_id']=$district;
        //$data['dist_name']=$dst_name;
        
        $header = array('Type of Emergency', $dst_name);
        
        $report_data = $this->inc_model->get_epcr_by_month($report_args);

        
        $amb_off_road_data = array();
        $b12_type = array();
        
        $incient_district = $this->inc_model->get_district_by_id($district);
        $type_of_emergency = array('0' => 'Medical',
        '1' => 'Other',
            '2' => 'Â Assault',
       
            '3' => 'Â Labour/ Pregnancy',
            '4' => 'Intoxication/Poisoning',
            '5' => 'Lighting/Electrocution',
            '6' => 'Trauma (Vehicle)',
            '7' => 'Trauma ( Non-Vehicle)',
            '8' => 'Animal Attack',
            '9' => 'Suicide/Self Inflicted Injury',
            '10' => 'Â Burns',
            '11' => 'Mass casualty',
            );
             
        //     $type_of_emergency = array('0' => 'Medical',
        // '1' => 'Assault',
        //     '2' => 'Burns',
       
        //     '3' => 'Cardiac',
        //     '5' => 'Intoxication/Poisoning',
        //     '6' => 'Labour/ Pregnancy',
        //     '7' => 'Lighting/Electrocution',
        //     '9' => 'Medical',
        //     '10' => 'Poly Trauma',
        //     '11' => 'Suicide/Self Inflicted Injury',
        //     '12' => 'Others',
        //     '13' => 'Unavailed Call',
        //     '14' => 'Patient already shifted by 108',
        //     '15' => 'Patient already shifted other vehicle');


        foreach ($report_data as $report) {

            $medicle_array = array(1,3,4,5,8,9,10,16,17,18,19,20,25,26,27,28,29,31,32,38,39,46,47,48,49,51,54,55,57,58,59,60,61,62,63,64,67,68,69);
            $truama_vechicle = array(15,33);
            $truama_non_vechicle = array(56);
            $labour_pregnancy = array(11, 12, 24, 34,65);
            $other = array(2,7,22,35,36,45);
            $animal_attack= array(30,37,50);
            $lighting = array(14);
            $intoxication = array(13,23);
            $suicide = array(40);
            $assault = array(6);
            $burn = array(66);
            $mass_casualty =array(70,71);
           
          
            if (isset($b12_type[$district])) {

                if (in_array($report['provider_impressions'], $medicle_array)) {

                    $b12_type[$district]['medical'] = $b12_type[$district]['medical'] + 1;
                   
                } else if (in_array($report['provider_impressions'], $truama_vechicle)) {

                    $b12_type[$district]['truama_vechicle'] = $b12_type[$district]['truama_vechicle'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $labour_pregnancy)) {

                    $b12_type[$district]['labour_pregnancy'] = $b12_type[$district]['labour_pregnancy'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $truama_non_vechicle)) {

                    $b12_type[$district]['truama_non_vechicle'] = $b12_type[$district]['truama_non_vechicle'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $lighting)) {

                    $b12_type[$district]['lighting'] = $b12_type[$district]['lighting'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $intoxication)) {

                    $b12_type[$district]['intoxication'] = $b12_type[$district]['intoxication'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $suicide)) {

                    $b12_type[$district]['suicide'] = $b12_type[$district]['suicide'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $assault)) {

                    $b12_type[$district]['assault'] = $b12_type[$district]['assault'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $animal_attack)) {

                    $b12_type[$district]['animal_attack'] = $b12_type[$district]['animal_attack'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $burn)) {

                    $b12_type[$district]['burn'] = $b12_type[$district]['burn'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $mass_casualty)) {

                    $b12_type[$district]['mass_casualty'] = $b12_type[$district]['mass_casualty'] + 1;
                    
                } else if (in_array($report['provider_impressions'], $other)) {

                    $b12_type[$district]['other'] = $b12_type[$district]['other'] + 1;
                    
                }
           
            } else {

                $b12_type[$district]['medical'] = 0;
                $b12_type[$district]['truama_non_vechicle'] = 0;
                $b12_type[$district]['labour_pregnancy'] = 0;
                $b12_type[$district]['other'] = 0;
                $b12_type[$district]['truama_vechicle'] = 0;
                $b12_type[$district]['lighting'] = 0;
                $b12_type[$district]['intoxication'] = 0;
                $b12_type[$district]['suicide'] = 0;
                $b12_type[$district]['assault'] = 0;
                $b12_type[$district]['animal_attack'] = 0;
                $b12_type[$district]['burn'] = 0;
                $b12_type[$district]['mass_casualty'] = 0;

                if (in_array($report['provider_impressions'], $medicle_array)) {

                    $b12_type[$district]['medical'] = $b12_type[$district]['medical'] + 1;
                } else if (in_array($report['provider_impressions'], $truama_vechicle)) {

                    $b12_type[$district]['truama_vechicle'] = $b12_type[$district]['truama_vechicle'] + 1;
                } else if (in_array($report['provider_impressions'], $labour_pregnancy)) {

                    $b12_type[$district]['labour_pregnancy'] = $b12_type[$district]['labour_pregnancy'] + 1;
                } else if (in_array($report['provider_impressions'], $truama_non_vechicle)) {

                    $b12_type[$district]['truama_non_vechicle'] = $b12_type[$district]['truama_non_vechicle'] + 1;
                } else if (in_array($report['provider_impressions'], $lighting)) {

                    $b12_type[$district]['lighting'] = $b12_type[$district]['lighting'] + 1;
                } else if (in_array($report['provider_impressions'], $intoxication)) {

                    $b12_type[$district]['intoxication'] = $b12_type[$district]['intoxication'] + 1;
                } else if (in_array($report['provider_impressions'], $suicide)) {

                    $b12_type[$district]['suicide'] = $b12_type[$district]['suicide'] + 1;
                } else if (in_array($report['provider_impressions'], $assault)) {

                    $b12_type[$district]['assault'] = $b12_type[$district]['assault'] + 1;
                } else if (in_array($report['provider_impressions'], $animal_attack)) {

                    $b12_type[$district]['animal_attack'] = $b12_type[$district]['animal_attack'] + 1;
                } else if (in_array($report['provider_impressions'], $burn)) {

                    $b12_type[$district]['burn'] = $b12_type[$district]['burn'] + 1;
                } else if (in_array($report['provider_impressions'], $mass_casualty)) {

                    $b12_type[$district]['mass_casualty'] = $b12_type[$district]['mass_casualty'] + 1;
                } else if (in_array($report['provider_impressions'], $other)) {

                    $b12_type[$district]['other'] = $b12_type[$district]['other'] + 1;
                }
            }
        }


        if ($post_reports['reports'] == 'view') {



            $data['header'] = $header;
            $data['inc_data'] = $b12_type;
            $data['report_args'] = $report_args;
            $data['submit_function'] = 'b12_type_report';
         //var_dump($data['inc_data']);die;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/inc_b12_report_view', $data, TRUE), 'list_table', TRUE);
        } else {

            $filename = "b12_reports.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            // $type_of_emergency = array('0' => 'Accident(Vehicle)',
            // '1' => 'Assault',
            // '2' => 'Medical',
            // '3' => 'Poly Trauma',
            // '4' => 'Labour/ Pregnancy',
            // '5' => 'Others',
            // '6' => 'cardiac',
            // '7' => 'Lighting/Electrocution',
            // '8' => 'Intoxication/Poisoning',
            // '9' => 'Suicide/Self Inflicted Injury',
            // '10' => 'Burn',
            // '11' => 'Fall',
            // '12' => 'Mass Casualty',
            // '13' => 'Unavailed Call',
            // '14' => 'Patient already shifted by 108',
            // '15' => 'Patient already shifted other vehicle');
            $type_of_emergency = array('0' => 'Medical',
            '1' => 'Other',
            '2' => 'Â Assault',
       
            '3' => 'Â Labour/ Pregnancy',
            '4' => 'Intoxication/Poisoning',
            '5' => 'Lighting/Electrocution',
            '6' => 'Trauma (Vehicle)',
            '7' => 'Trauma ( Non-Vehicle)',
            '8' => 'Animal Attack',
            '9' => 'Suicide/Self Inflicted Injury',
            '10' => 'Â Burns',
            '11' => 'Mass casualty',
            );

            $pro_imp = array(
                '0' => 'medical',
                '1' => 'other',
                '2' => 'assault',
                '3' => 'labour_pregnancy',
                '4' => 'intoxication',
                '5' => 'lighting',
                '6' => 'truama_vechicle',
                '7' => 'truama_non_vechicle',
                '8' => 'animal_attack',
                '9' => 'suicide',
                '10' => 'burn',
                '11' => 'mass_casualty',
                
                   );

            for ($r = 0; $r < count($type_of_emergency); $r++) {

                $pro_name = $pro_imp[$r];
                 if($b12_type[$district][$pro_name] != NULL){
                     $result = $b12_type[$district][$pro_name];
                 }
                 else{
                     $result = "0";
                 }
                //var_dump($row);die;
                $row['eme_type'] = $type_of_emergency[$r];
                $row[$district] = $result;
                // $row['Gadchiroli'] = $b12_type['Gadchiroli'][$pro_name];
                // $row['Mumbai'] = $b12_type['Mumbai'][$pro_name];
                // $row['Palghar'] = $b12_type['Palghar'][$pro_name];
                // $row['Solapur'] = $b12_type['Solapur'][$pro_name];
                // $total = $b12_type['Solapur'][$pro_name] + $b12_type['Palghar'][$pro_name] + $b12_type['Mumbai'][$pro_name] + $b12_type['Gadchiroli'][$pro_name] + $b12_type['Amravati'][$pro_name];
                // $row['total'] = $total;

                fputcsv($fp, $row);
                
            }

            fclose($fp);
            exit;
        }
    }

    function details_amb_onroad_offroad_report() {

        $post_reports = $this->input->post();

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month'],
                'amb_status' => '7,8',
                'amb_emso_status' => '1,9');
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month'],
                'amb_status' => '7,8',
                'amb_emso_status' => '1,9');
        }


        if ($post_reports['incient_district'] != '') {
            
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'district_code' => $post_reports['incient_district'],
                'base_month' => $this->post['base_month'],
                'amb_status' => '7,8',
                'amb_emso_status' => '1,9');
            
        }
       

        $header = array('Sr.No', 'District', 'Ambulance No', 'Type', 'Off-road Remark', 'Off-road Date','Off-road Time', 'On-road Remark', 'On-road Date','On-road Time', 'Remark', 'System Added Date', 'System Update date');

        $report_data = $this->ambmain_model->get_ambulance_onroad_offroad_report($report_args);
        //var_dump($report_data);
        //die();

        if ($post_reports['reports'] == 'view') {

            $data['header'] = $header;
            $data['inc_data'] = $report_data;
            $data['report_args'] = $report_args;

            $this->output->add_to_position($this->load->view('frontend/erc_reports/details_report_onroad_ofroad_view', $data, TRUE), 'list_table', TRUE);
        } else {

            $filename = "Ambulance_onroad_offroad_Report.csv";
            $fp = fopen('php://output', 'w');


            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $data = array();
            $count = 1;
            foreach($report_data as $key => $amb_data) {
                
                if($amb_data->mt_on_stnd_remark == 'ambulance_onroad'){
                    $on_road_remark = 'Ambulance On-road';
                }else{
                    $on_road_remark=$amb_data->mt_on_stnd_remark;
                }
                if($amb_data->mt_stnd_remark == 'Ambulance_offroad'){
                    $off_road_remark = 'Ambulance Off-road';
                }else{
                    $off_road_remark=$amb_data->mt_stnd_remark;
                }
         
                $row['count'] = $count;
                $row['dst_name'] = $amb_data->dst_name;
                $row['amb_rto_register_no'] = $amb_data->mt_amb_no;
                $row['type'] = $amb_data->ambt_name;
                $row['off_road_remark'] = $off_road_remark;
                $row['off_road_date_date'] = date('Y-m-d',strtotime($amb_data->mt_offroad_datetime));
                $row['off_road_date_time'] = date('H:i:s',strtotime($amb_data->mt_offroad_datetime));
                $row['on_road_remark'] = $on_road_remark;
                $row['on_road_date_date'] = date('Y-m-d',strtotime($amb_data->mt_onroad_datetime));
                $row['on_road_date_time'] = date('H:i:s',strtotime($amb_data->mt_onroad_datetime));
                $row['remark'] =  $amb_data->mt_remark;
                $row['added_date'] = $amb_data->mt_added_date;
                $row['modify_date'] = $amb_data->mt_modify_date;
                fputcsv($fp, $row);
            }

            fclose($fp);
            exit;
        }
    }

    function amb_onroad_offroad_report() {
        $post_reports = $this->input->post();

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month'],
                'amb_status' => '7,8',
                'amb_emso_status' => '1,9');
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month'],
                'amb_status' => '7,8',
                'amb_emso_status' => '1,9');
        }


        if ($post_reports['incient_district'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'district_code' => $post_reports['incient_district'],
                'base_month' => $this->post['base_month'],
                'amb_status' => '7,8',
                'amb_emso_status' => '1,9');
        }


        $header = array('Sr.No', 'Ambulance No','Type', 'District','Off-road date','Off-road time','On-road date','On-road time','System added date','System Updated date','Remark', 'Total Hour in Month', 'No of Off-road hour during Month', 'No of On-road hour during Month');
        $report_data = $this->inc_model->get_amb_status_summary_date($report_args);


        $amb_off_road_data = array();

        $seconds_in_month = strtotime($report_args['to_date'] . ' 24:00:00') - strtotime($report_args['from_date'] . ' 00:00:00');

        $H = floor($seconds_in_month / 3600);
        $i = ($seconds_in_month / 60) % 60;
        $s = $seconds_in_month % 60;
        $totol_hour_in_month = sprintf("%02d:%02d:%02d", $H, $i, $s);


        foreach ($report_data as $report) {

            $amb_off_road_data[$report['amb_rto_register_no']]['total_hour'] = $totol_hour_in_month;
            $amb_off_road_data[$report['amb_rto_register_no']]['dst_name']=$report['dst_name'];
            $amb_off_road_data[$report['amb_rto_register_no']]['hp_name']=$report['hp_name'];
            $amb_off_road_data[$report['amb_rto_register_no']]['ambt_name']=$report['ambt_name'];

            $off_road_date = $report['off_road_date'];
            $off_road_time = $report['off_road_time'];

            $on_road_date = $report['on_road_date'];
            $on_road_time = $report['on_road_time'];
            
            //$off_road = $report['mt_offroad_datetime'];
            //$on_road = $report['mt_onroad_datetime'];

            $off_road = strtotime($off_road_date . ' ' . $off_road_time);

            $on_road = strtotime($on_road_date . ' ' . $on_road_time);
            $time_diff = $on_road - $off_road;
            if ($time_diff > 0) {

                $amb_off_road_data[$report['amb_rto_register_no']]['off_road'] += $time_diff;
            }
            $amb_off_road_data[$report['amb_rto_register_no']]['on_road'] = $seconds_in_month - $amb_off_road_data[$report['amb_rto_register_no']]['off_road'];
            $amb_off_road_data[$report['amb_rto_register_no']]['total_hour_second'] = $seconds_in_month;
            $amb_off_road_data[$report['amb_rto_register_no']]['dst_name'] = $report['dst_name'];
        }


        if ($post_reports['reports'] == 'view') {



            $data['header'] = $header;
            $data['inc_data'] = $report_data;
            $data['report_args'] = $report_args;

            $this->output->add_to_position($this->load->view('frontend/erc_reports/onroad_ofroad_view', $data, TRUE), 'list_table', TRUE);
        } else {

            $filename = "Ambulance_onroad_offroad_Report.csv";
            $fp = fopen('php://output', 'w');


            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $data = array();
            $count = 1;
            foreach ($amb_off_road_data as $key => $amb_data) {
                $row['count'] = $count;
                $row['amb_rto_register_no'] = $key;
                $row['base_location'] = $amb_data['dst_name'];
                $row['total_hour'] = $amb_data['total_hour'];
                $off_road_seconds = $amb_data['off_road'];
                $H = floor($off_road_seconds / 3600);
                $i = ($off_road_seconds / 60) % 60;
                $s = $off_road_seconds % 60;
                $off_road = sprintf("%02d:%02d:%02d", $H, $i, $s);
                $row['off_road'] = $off_road;

                $on_road_seconds = $amb_data['on_road'];
                $on_H = floor($on_road_seconds / 3600);
                $on_i = ($on_road_seconds / 60) % 60;
                $on_s = $on_road_seconds % 60;
                $on_road = sprintf("%02d:%02d:%02d", $on_H, $on_i, $on_s);
                $row['on_road'] = $on_road;
                

//                $on_road_seconds = $amb_data['off_road'];
//                $on_H = floor($on_road_seconds / 3600);
//                $on_i = ($on_road_seconds / 60) % 60;
//                $on_s = $on_road_seconds % 60;
//                $break_down = sprintf("%02d:%02d:%02d", $on_H, $on_i, $on_s);
//                $row['break_down'] = $break_down;

                fputcsv($fp, $row);
            }

            fclose($fp);
            exit;
        }
    }
    
    function amb_district_onroad_offroad_report() {
        $post_reports = $this->input->post();

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month'],
                'amb_status' => '7,8',
                'amb_emso_status' => '1,9');
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month'],
                'amb_status' => '7,8',
                'amb_emso_status' => '1,9');
        }


        if ($post_reports['incient_district'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'district_code' => $post_reports['incient_district'],
                'base_month' => $this->post['base_month'],
                'amb_status' => '7,8',
                'amb_emso_status' => '1,9');
        }


        $header = array('Sr.No', 'District','Base location','Ambulance No','Type','Total Hour in month','No of off-road hour during month','No of On-road hour during month','Total uptime in month');
        
        $report_data = $this->ambmain_model->get_ambulance_onroad_offroad_report($report_args);


        $amb_off_road_data = array();

        $seconds_in_month = strtotime($report_args['to_date'] . ' 24:00:00') - strtotime($report_args['from_date'] . ' 00:00:00');

        $H = floor($seconds_in_month / 3600);
        $i = ($seconds_in_month / 60) % 60;
        $s = $seconds_in_month % 60;
        $totol_hour_in_month = sprintf("%02d:%02d:%02d", $H, $i, $s);


        foreach ($report_data as $report) {
            //var_dump($report);
            
            

            $amb_off_road_data[$report->mt_amb_no]['dst_name']=$report->dst_name;
            $amb_off_road_data[$report->mt_amb_no]['hp_name']=$report->hp_name;
            $amb_off_road_data[$report->mt_amb_no]['ambt_name']=$report->ambt_name;
            $amb_off_road_data[$report->mt_amb_no]['total_hour'] = $totol_hour_in_month;

            $off_road_date = $report->off_road_date;
            $off_road_time = $report->off_road_time;

            $on_road_date = $report->on_road_date;
            $on_road_time = $report->on_road_time;
            
            $off_road = strtotime($report->mt_offroad_datetime);
            $on_road = strtotime($report->mt_onroad_datetime);

            //$off_road = strtotime($off_road_date . ' ' . $off_road_time);

           // $on_road = strtotime($on_road_date . ' ' . $on_road_time);
            $time_diff = $on_road - $off_road;
            if ($time_diff > 0) {

                $amb_off_road_data[$report->mt_amb_no]['off_road'] += $time_diff;
            }
            $amb_off_road_data[$report->mt_amb_no]['on_road'] = $seconds_in_month - $amb_off_road_data[$report->mt_amb_no]['off_road'];
            $amb_off_road_data[$report->mt_amb_no]['total_hour_second'] = $seconds_in_month;
            
            if( $amb_off_road_data[$report->mt_amb_no]['on_road'] >0){  
                    $up_time = ( $amb_off_road_data[$report->mt_amb_no]['on_road']/$seconds_in_month)*100;       
            }
            $amb_off_road_data[$report->mt_amb_no]['up_time'] = $up_time;
        }
       // var_dump($amb_off_road_data);


        if ($post_reports['reports'] == 'view') {



            $data['header'] = $header;
            $data['inc_data'] = $amb_off_road_data;
            $data['report_args'] = $report_args;

            $this->output->add_to_position($this->load->view('frontend/erc_reports/district_onroad_ofroad_view', $data, TRUE), 'list_table', TRUE);
        } else {

            $filename = "Ambulance_onroad_offroad_Report.csv";
            $fp = fopen('php://output', 'w');


            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $data = array();
            $count = 1;
            foreach ($amb_off_road_data as $key => $amb_data) {
                $row['count'] = $count;
                $row['dst_name'] = $amb_data['dst_name'];
                $row['base_location'] = $amb_data['hp_name'];
                $row['amb_rto_register_no'] = $key;
                $row['ambt_name'] = $amb_data['ambt_name'];
                
                $row['total_hour'] = $amb_data['total_hour'];
                $off_road_seconds = $amb_data['off_road'];
                $H = floor($off_road_seconds / 3600);
                $i = ($off_road_seconds / 60) % 60;
                $s = $off_road_seconds % 60;
                $off_road = sprintf("%02d:%02d:%02d", $H, $i, $s);
                $row['off_road'] = $off_road;

                $on_road_seconds = $amb_data['on_road'];
                $on_H = floor($on_road_seconds / 3600);
                $on_i = ($on_road_seconds / 60) % 60;
                $on_s = $on_road_seconds % 60;
                $on_road = sprintf("%02d:%02d:%02d", $on_H, $on_i, $on_s);
                $row['on_road'] = $on_road;
                if($amb_data['on_road'] > 0 ){  
                    $up_time = ($amb_data['on_road']/$seconds_in_month)*100; 
                    $up_H = floor($up_time / 3600);
                    $up_i = ($up_time / 60) % 60;
                    $up_s = $up_time % 60;
                    $on_up_time = sprintf("%02d:%02d:%02d", $up_H, $up_i, $up_s);
                
                }
                $row['up_time'] = round($up_time,2);

//                $on_road_seconds = $amb_data['off_road'];
//                $on_H = floor($on_road_seconds / 3600);
//                $on_i = ($on_road_seconds / 60) % 60;
//                $on_s = $on_road_seconds % 60;
//                $break_down = sprintf("%02d:%02d:%02d", $on_H, $on_i, $on_s);
//                $row['break_down'] = $break_down;

                fputcsv($fp, $row);
            }

            fclose($fp);
            exit;
        }
    }

    public function save_export_ercp_report() {

        $post_reports = $this->input->post();

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']
            );
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']
            );
        }

        $report_data = $this->Medadv_model->get_inc_report_by_ercp($report_args);
        //var_dump($report_data);die;

        $header = array('Incident ID',
            'Patient Name',
            'Age',
            'Gender',
            'Call Type',
            'ERCP Chief Complaint',
            'ERCP Call  Receive Time',
            // 'Caller Mobile No',
            'District Name',
            'ERCP Advice',
//            'ERCP Remark',
            'Operated by',
            'ERCP Disconnected time',
            'Duration',
            'Closure Status'
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {
                //if($row->atnd_date != NULL){
                    $duration = "";
                    if($row->atnd_date != '' ){
                    $d1= new DateTime($row->atnd_date);
                    

                $d2=new DateTime($row->adv_cl_date);
                $duration=$d2->diff($d1);
                //var_dump($duration);die;
                    }
                   if($duration != NULL){
                   $duration = $duration->h . ':' . $duration->i . ':' . $duration->s;
                   }
                   else{
                       $duration= "00:00:00";
                   }
                   if($row->ptn_fullname == NUll){
                         $name=$row->ptn_fname.' '.$row->ptn_lname;
                   }
                   else{
                       $name= $row->ptn_fullname;
                   }
                  //var_dump($duration);die;
                $inc_data[] = array(
                    'adv_inc_ref_id' => $row->adv_inc_ref_id,
                    'ptn_fullname' => $name,
                    'ptn_age' => $row->ptn_age,
                    'ptn_gender' => $row->ptn_gender,
                    'inc_type' => ucwords($row->inc_type),
                    'ct_type' => $row->que_question,
                    'atnd_date' => $row->atnd_date,
                    'clr_mobile' => $row->clr_mobile,
                    'dst_name' => $row->dst_name,
                    'adv_emt' => $row->adv_emt,
                    'adv_cl_date' => $row->adv_cl_date,
                    'adv_cl_ercp_addinfo' => $row->adv_cl_ercp_addinfo,
                    'duration' => $duration,
                    'inc_pcr_status' => $row->inc_pcr_status
                );
            }

//var_dump($inc_data);die;
            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'save_export_ercp_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ercp_inc_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "ercp_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();

            foreach ($report_data as $row) {
//var_dump();die;
                if($row->inc_pcr_status == '1'){
                    $status = "Closed";
                } 
                    else{
                        $status = "Pending"; 
                    }
                    $inc_date = date('Y-m-d',strtotime($row->adv_cl_date));
                    $inc_time = date('H:i:s',strtotime($row->adv_cl_date));
                    if($row->atnd_date != NULL){
                    $inc_receive_date = date('Y-m-d',strtotime($row->atnd_date));
                    $inc_receive_time = date('H:i:s',strtotime($row->atnd_date));
                    $final_date = $inc_receive_date.'-'.$inc_receive_time;
                    }
                    else{
                        $final_date="";
                        
                    }
                    if($row->atnd_date != NULL){
                        $d1= new DateTime($row->atnd_date);
                        
    
                    $d2=new DateTime($row->adv_cl_date);
                    $duration=$d2->diff($d1);
               // var_dump($atnd_date);
                        
                       //if($duration != NULL){
                       $duration = $duration->h . ':' . $duration->i . ':' . $duration->s;
                       }
                       else{
                        $duration = '00:00:00';
                       }
                       if($row->ptn_fullname == NUll){
                        $name=$row->ptn_fname.' '.$row->ptn_lname;
                  }
                  else{
                      $name= $row->ptn_fullname;
                  }
                //var_dump($duration);
                $inc_data = array(
                    'adv_inc_ref_id' => $row->adv_inc_ref_id,
                    'ptn_fullname' => $name,
                    'ptn_age' => $row->ptn_age,
                    'ptn_gender' => $row->ptn_gender,
                    'inc_type' => get_purpose_of_call($inc['inc_type']),
                    'ct_type' => $row->que_question,
                    'atnd_date' => $final_date,
                    // 'clr_mobile' => $row->clr_mobile,
                    'dst_name' => $row->dst_name,
                    'adv_cl_ercp_addinfo' => $row->adv_cl_ercp_addinfo,
                   // 'ercp_remark' => '',
                   'adv_emt' => ucwords($row->adv_emt),
                    'inc_datetime' => $inc_date.'-'.$inc_time,
                    'duration' => $duration,
                    'inc_pcr_status' => $status 
                );
        //var_dump($inc_data);
                fputcsv($fp, $inc_data);
            }

            fclose($fp);
            exit;
        }
    }

    public function save_export_tans_patient() {

        $post_reports = $this->input->post();
        
        $report_type = $this->input->post('ptn_report_type');
        $data['ptn_report_type'] = $report_type;
        

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'system' =>$post_reports['system'],
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'system' =>$post_reports['system'],
                'base_month' => $this->post['base_month']);
        }


        //$report_data = $this->inc_model->get_patient_epcr_report_by_date($report_args);
        
        $patient_data = $this->inc_model->get_patient_by_provider_impression($report_args);

        $total_inc = $this->inc_model->get_inc_total($report_args);
        $total_calls = $total_inc[0]->total_calls;
        
        
        $arg_data = array('inc_added_by'=>$erodata->clg_ref_id,
             'from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
            'system' =>$post_reports['system'],
                 'inc_type'=>"NON_MCI','AD_SUP_REQ','DROP_BACK','IN_HO_P_TR','MCI','EMT_MED_AD','PREGANCY_CALL','VIP_CALL','Child_CARE_CALL");

        
        $total_count_eme = get_inc_total_by_user($arg_data);

        $amb_args['get_count'] = TRUE;
        $total_amb = $this->amb_model->get_tdd_total_amb();

        $report_args['get_count'] = TRUE;

         if($report_type == '2'){
            $header = array('Month', 'No $total_count_emeof ambulance', 'Total Calls', 'Total Emergencies Calls', 'Total Emergencies Attended');
         }else{
             $header = array('No of ambulance', 'Total Calls', 'Total Emergencies Calls', 'Total Emergencies Attended');
         }
         
        $row = array();
        if($report_type == '2'){
            $row['month'] = $patient_data['month'];
        }
        $row['no_amb'] = $total_amb;
        $row['total_calls'] = $total_calls;
        $row['total_emergency_calls'] = $total_count_eme?$total_count_eme:0; 
        $row['attend_calls'] = $total_count_eme?$total_count_eme:0;
            
             
        foreach($patient_data as $patient){
            $header[] = $patient->pro_name;
            $row[$patient->pro_name] = $patient->total_imp;
        }
        


        if ($post_reports['reports'] == 'view') {
            
            $data['header'] = $header;
            $data['inc_data'] = $row;
            $data['report_args'] = $report_args;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ptn_trans_report_view', $data, TRUE), 'list_table', TRUE);
            
        } else {

            $filename = "patient_trans_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            fputcsv($fp, $row);
            fclose($fp);
            exit;
        }
    }
    
    public function save_export_tans_patient_new(){
        $post_reports = $this->input->post();
        
        $report_type = $this->input->post('ptn_report_type');
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
        $to_date = date('Y-m-d', strtotime($post_reports['to_date']));
        $header = array('Call Type', 'Call Count on '.$from_date.' to '.$to_date);
        
        $report_args_attends = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month'],
                'system' =>$post_reports['system'],
                'incis_deleted' => '0');


        $total_inc_attend = $this->inc_model->get_inc_call_type_total($report_args_attends);
        
        
          if ($post_reports['reports'] == 'view') {

            $row['total_calls'] = $total_calls;

            $data['header'] = $header;
            $data['inc_data'] = $total_inc_attend;
            $data['report_args'] = $report_args_attends;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/ptn_trans_report_new_view', $data, TRUE), 'list_table', TRUE);
        } else {

            $filename = "patient_trans_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);
            foreach($total_inc_attend as $total_inc){
                 $row = array('inc_name' => $total_inc->call_purpose,
                              'inc_total'=> $total_inc->total_call);
                 $grand_total = $grand_total+$total_inc->total_call;
                  fputcsv($fp, $row);
            }
            $total_calls = array('Grand Total',$grand_total);
            fputcsv($fp, $total_calls);



            fclose($fp);
            exit;
        }
    }

    function ambulance_distance_report() {

        $post_reports = $this->input->post();
        $to_data = date('Y-m-t', strtotime($post_reports['from_date']));
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
        $report_type = $this->input->post('amb_type');
        $data['amb_type'] = $report_type;
       

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
             $district_data['month'] = date('M Y', strtotime($post_reports['from_date']));

            
           
        }



        $report_data = $this->inc_model->get_distance_report_by_date($report_args);
       

        $district_data = array();

        $district_data['amb'] = array();
        $district_data['inc_ref_id'] = array();
        $district_data['total_km'] = 0;
         $district_data['month'] =date('M Y', strtotime($post_reports['from_date']));
        
        foreach ($report_data as $report) {
            
            

            $district_data['month'] = date('M Y', strtotime($post_reports['from_date']));


            if (!in_array($report['amb_reg_id'], $district_data['amb'])) {
                $district_data['amb'][] = $report['amb_reg_id'];
            }


            if (!in_array($report['inc_ref_id'], $district_data['inc_ref_id'])) {
              //  var_dump($report['total_km']);

                $district_data['inc_ref_id'][] = $report['inc_ref_id'];

               // if (!empty($report['start_odometer'])) {

                //    if ($report['end_odometer'] >= $report['start_odometer']) {

                        $report_odometer = $report['end_odometer'] - $report['start_odometer'];
                        // $district_data['total_km']  +=  $report_odometer;
                        $district_data['total_km'] += $report['total_km'];
                //    }

                    $district_data['trips'][] = $report_odometer;
               // }
            }
        }


        if($report_type == '1'){
            $header = array('No of ambulance', 'Total Distance travel by Ambulance', 'Average distance travel per Ambulance');
        }else{
             $header = array('Month', 'No of ambulance', 'Total Distance travell by Ambulance', 'Average distance travel per Ambulance');
        }

        if ($post_reports['reports'] == 'view') {

            if($report_type == '2'){
                $row['month'] = $district_data['month'];
            }
            $row['no_amb'] = $this->amb_model->get_tdd_total_amb();


            $row['total_km'] = $district_data['total_km'];

            //$row['avg_veh_km'] = $row['total_km'] / count($district_data['amb']);
            $avg_veh_km = $row['total_km'] / $row['no_amb'];
            $row['avg_veh_km1'] = number_format($avg_veh_km, 2);
            $data['header'] = $header;
            $data['inc_data'] = $row;

            $data['report_args'] = $report_args;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/amb_dist_travel_view', $data, TRUE), 'list_table', TRUE);
        } else {

            $filename = "bvg_monthly_distance_travelled_reports.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);


            
            if($report_type == '2'){
                $row['month'] = $district_data['month'];
            }
            $row['no_amb'] = count($district_data['amb']);
            $row['no_amb'] = $this->amb_model->get_tdd_total_amb();
            $row['total_km'] = $district_data['total_km'];

            //$row['avg_veh_km'] = $row['total_km'] / count($district_data['amb']);
           // $row['avg_veh_km'] = $row['total_km'] / $row['no_amb'];
           $avg_veh_km = $row['total_km'] / $row['no_amb'];
           $row['avg_veh_km1'] = number_format($avg_veh_km, 2);
            fputcsv($fp, $row);



            fclose($fp);
            exit;
        }
    }

    function export_district_wise() {

        $post_reports = $this->input->post();
        // var_dump($post_reports);die;
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
        $to_data = date('Y-m-t', strtotime($post_reports['from_date']));


//        $report_args = array('from_date' => $from_date,
//            'to_date' => $to_data,
//            'district' => $post_reports['incient_district']);
//        
        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month'],
             "incient_district" => $post_reports['incient_district']
             );
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month'],
                "incient_district" => $post_reports['incient_district']
            );
        }



        $report_data = $this->inc_model->get_district_amb_details($report_args);


        $district_data = array();


        foreach ($report_data as $report) {

            $district = $report['amb_district'];

            $incient_district = $this->inc_model->get_district_by_id($district);
            $dst_name = $incient_district->dst_name;

            if (isset($district_data[$dst_name])) {

                if (!in_array($report['amb_rto_register_no'], $district_data[$dst_name]['amb'])) {

                    $district_data[$dst_name]['amb'][] = $report['amb_rto_register_no'];
                }

                if ($post_reports['from_date'] == "2018-07-01") {
                    //if(!in_array($report['inc_ref_id'], (array)$district_data[$dst_name]['inc_ref_id'])){

                    $district_data[$dst_name]['inc_ref_id'][] = $report['inc_ref_id'];

                    if ($report['end_odometer'] >= $report['start_odometer']) {
                        $report_odometer = $report['end_odometer'] - $report['start_odometer'];
                        $district_data[$dst_name]['total_km'] += $report_odometer;
                        if ($report_odometer > 0) {
                            $district_data[$dst_name]['trips'][] = $report_odometer;
                        }
                    }
                    //  }
                } else {
                    if (!in_array($report['inc_ref_id'], (array) $district_data[$dst_name]['inc_ref_id'])) {

                        $district_data[$dst_name]['inc_ref_id'][] = $report['inc_ref_id'];

                        if ($report['end_odometer'] >= $report['start_odometer']) {
                            $report_odometer = $report['end_odometer'] - $report['start_odometer'];
                            $district_data[$dst_name]['total_km'] += $report_odometer;
                            if ($report_odometer > 0) {
                                $district_data[$dst_name]['trips'][] = $report_odometer;
                            }
                        }
                    }
                }
            } else {

                $district_data[$dst_name]['amb'] = array();

                if (!in_array($report['amb_rto_register_no'], $district_data[$dst_name]['amb'])) {
                    $district_data[$dst_name]['amb'][] = $report['amb_rto_register_no'];
                }

                if (!in_array($report['inc_ref_id'], (array) $district_data[$dst_name]['inc_ref_id'])) {

                    $district_data[$dst_name]['inc_ref_id'][] = $report['inc_ref_id'];

                    if ($report['end_odometer'] >= $report['start_odometer']) {

                        $report_odometer = $report['end_odometer'] - $report['start_odometer'];
                        $district_data[$dst_name]['total_km'] += $report_odometer;
                        if ($report_odometer > 0) {
                            $district_data[$dst_name]['trips'][] = $report_odometer;
                        }
                    }
                }
            }
        }
        //var_dump($district_data);
        $row = array();

        foreach ($district_data as $key => $district) {

            if (isset($district['trips'])) {
                $total_trips = count($district['trips']);
            } else {
                $total_trips = 0;
            }


            $avg_km_amb = "";
            if ((count($district['amb'])) != '') {
                $avg_km_amb = number_format($district['total_km'] / count($district['amb']), 2);
            }

            $avg_km = 0;
            if ((count($district['trips'])) != '') {
                $avg_km = number_format($avg_km_amb / count($district['trips']), 2);
            }
            $avg_veh_km = 0;

            if ((count($district['trips'])) != '') {
                $avg_veh_km = $total_trips / count($district['amb']);
            }

            $row[] = array('district' => $key,
                'no_amb' => count($district['amb']),
                'total_km' => $district['total_km'],
                'avg_km_amb' => $avg_km_amb,
                'trips' => $total_trips,
                'avg_km' => $avg_km,
                'avg_veh_km' => $avg_veh_km);
        }

        $header = array('District',
            'No of Ambulance',
            'Total Kms',
            'Avg KMS/ Ambulance',
            'Total Trips',
            'Average Km/trip',
            'Average Trip/vehicle');

        if ($post_reports['reports'] == 'view') {



            $data['header'] = $header;
            $data['inc_data'] = $row;
            $data['report_args'] = $report_args;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/district_wise_list_report_view', $data, TRUE), 'list_table', TRUE);
        } else {

            $filename = "bvg_district_wise_distance_covered_by_ambulance.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);


            foreach ($row as $row) {
                fputcsv($fp, $row);
            }



            fclose($fp);
            exit;
        }
    }

    function ambulance_report_form_report() {

        $post_reports = $this->input->post();

        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }
        
        $report_type = $this->input->post('amb_type');
        $data['amb_type'] = $report_type;

        
        $amb_odometer = array();


        $tdd_amb = $this->amb_model->get_tdd_amb();


        foreach ($tdd_amb as $tdd) {
            
            if($report_type == '2'){
                $amb_odometer[$tdd->amb_rto_register_no]['month'] = date('M Y', strtotime($post_reports['from_date']));
            }
            $amb_odometer[$tdd->amb_rto_register_no]['amb_rto_register_no'] = $tdd->amb_rto_register_no;

            $amb_odometer[$tdd->amb_rto_register_no]['total_km'] = 0;
            $amb_odometer[$tdd->amb_rto_register_no]['avg_km'][] = 0;

            $report_args['amb_reg_no'] = $tdd->amb_rto_register_no;
            
//            var_dump($report_args);
//            die();
            
            $min_odometer = $this->inc_model->get_ambulance_min_odometer($report_args);
          

            $amb_odometer[$tdd->amb_rto_register_no]['min_odometer'] = $min_odometer[0]['start_odmeter'] ? $min_odometer[0]['start_odmeter'] : 0;

//            if ($amb_odometer[$tdd->amb_rto_register_no]['min_odometer'] == 0) {
//                $report_args_dt = array('to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
//                    'amb_reg_no' => $tdd->amb_rto_register_no);
//
//                $min_odometer1 = $this->inc_model->get_ambulance_max_odometer($report_args_dt);
//                $amb_odometer[$tdd->amb_rto_register_no]['min_odometer'] = $min_odometer1[0]['end_odmeter'] ? $min_odometer1[0]['end_odmeter'] : 0;
//                //var_dump($min_odometer);die();
//            }

            $max_odometer = $this->inc_model->get_ambulance_max_odometer($report_args);
            $amb_odometer[$tdd->amb_rto_register_no]['max_odometer'] = $max_odometer[0]['end_odmeter'] ? $max_odometer[0]['end_odmeter'] : 0;

            $report_data = $this->inc_model->get_distance_report_by_date($report_args);


            foreach ($report_data as $report) {


                if ($report['end_odmeter'] < $report['start_odmeter']) {
                    continue;
                }

                $report_odometer = $report['end_odometer'] - $report['start_odometer'];

                if (isset($report['amb_reg_id'])) {

                    if (!in_array($report['inc_ref_id'], (array) $amb_odometer[$report['amb_reg_id']]['inc_ref_id'])) {

                        $amb_odometer[$report['amb_reg_id']]['inc_ref_id'][] = $report['inc_ref_id'];
                        $amb_odometer[$report['amb_reg_id']]['total_km'] += $report['total_km'];
                    }
                }

                $amb_odometer[$report['amb_reg_id']]['avg_km'][] = $report_odometer;
            }
        }


        if($report_type == '2'){
            $header = array('Month', 'Ambulance No', 'Opening Odometer', 'Closing Odometer', 'Total KM', 'Average KM');
        }else{
            $header = array('Ambulance No', 'Opening Odometer', 'Closing Odometer', 'Total KM', 'Average KM');
        }

        if ($post_reports['reports'] == 'view') {


            $inc_data = array();
            foreach ($amb_odometer as $row) {
               if(is_numeric($row['max_odometer']) &&  is_numeric($row['min_odometer']))
                {
                if (count($row['avg_km']) > 0) {
                    $total_odometer = $row['max_odometer'] - $row['min_odometer'];
                    $row['avg_km'] = number_format($row['total_km'] / count($row['avg_km']), 2);
                }}
                $inc_data[] = $row;
            }



            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;

            $this->output->add_to_position($this->load->view('frontend/erc_reports/ambulance_wise_reports', $data, TRUE), 'list_table', TRUE);
        } else {

            $filename = "ambulance_wise_distance_travelled_report.csv";
            $fp = fopen('php://output', 'w');


            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $data = array();
            foreach ($amb_odometer as $row) {
                if($report_type == '2'){
                    $row1['month'] = $row['month'];
                }
                $row1['amb_rto_register_no'] = $row['amb_rto_register_no'];
                $row1['min_odometer'] = $row['min_odometer'];
                $row1['max_odometer'] = $row['max_odometer'];
                $row1['total_km'] = $row['max_odometer'] - $row1['min_odometer'];
                if (count($row['avg_km']) > 0) {
                    $row1['avg_km'] = number_format($row['total_km'] / count($row['avg_km']), 2);
                }
                fputcsv($fp, $row1);
            }

            fclose($fp);
            exit;
        }
    }

    function break_single_date_report() {

        $post_reports = $this->input->post();
        
        if ($post_reports['department_name'] != '') {
            $report_args = array(
                'clg_group' => $post_reports['department_name'],
                'clg_ref_id' => $post_reports['user_id'],
                'base_month' => $this->post['base_month']
            );
        } else {
            $report_args = array(
                'single_date' => date('Y-m-d', strtotime($post_reports['single_date'])),
                'base_month' => $this->post['base_month']
                 //'clg_ref_id' => $post_reports['user_id'],
            );
        }
        $report_data = $this->shiftmanager_model->get_break_details_by_user($report_args);
        $header = array('Date',
            'ERO Name',
            'Break Name',
            'Break time',
            'Back to Break Time',
            'Break Duration',
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {
                $duration = "";
                if($row->clg_break_time != '' ){
                $d1= new DateTime($row->clg_break_time);
                

            $d2=new DateTime($row->clg_back_to_break_time);
            $duration=$d2->diff($d1);
            //var_dump($duration);die;
                }
               if($duration != NULL){
               $duration = $duration->h . ':' . $duration->i . ':' . $duration->s;
               $duration =date('H:i:s', strtotime($duration));
               }
               else{
                   $duration= "00:00:00";
               }
                $inc_data[] = array(
                    'clg_ref_id' => $row->clg_ref_id,
                    'clg_break_time' => date('Y-m-d', strtotime($row->clg_break_time)),
                    'clg_first_name' => ucwords($row->clg_first_name),
                    'clg_mid_name' => ucwords($row->clg_mid_name),
                    'clg_last_name' => ucwords($row->clg_last_name),
                    'clg_break_time' => $row->clg_break_time,
                    'break_name' => $row->break_name,
                    'clg_back_to_break_time' => $row->clg_back_to_break_time,
                    'break_time' => $duration,
                );
            }
//var_dump( $inc_data);die;

            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'break_single_date_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/employee_break_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "employee_break_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {

                $duration = "";
                if($row->clg_break_time != '' ){
                $d1= new DateTime($row->clg_break_time);
                

            $d2=new DateTime($row->clg_back_to_break_time);
            $duration=$d2->diff($d1);
            //var_dump($duration);die;
                }
               if($duration != NULL){
               $duration = $duration->h . ':' . $duration->i . ':' . $duration->s;
               $duration =date('H:i:s', strtotime($duration));
               }
               else{
                   $duration= "00:00:00";
               }

                $inc_data = array(
                    'clg_break_time' => date('Y-m-d', strtotime($row->clg_break_time)),
                    'clg_first_name' => ucwords($row->clg_first_name . ' ' . $row->clg_mid_name . ' ' . $row->clg_last_name),
                    'break_name' => $row->break_name,
                    'clg_login_time' => $row->clg_break_time,
                    'clg_logout_time' => $row->clg_back_to_break_time,
                    'break_time' => $duration,

                );

                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }

    function login_logout_single_date_report() {


        $post_reports = $this->input->post();
        if ($post_reports['department_name'] != '') {
            $report_args = array(
                'clg_group' => $post_reports['department_name'],
                'clg_ref_id' => $post_reports['user_id'],
                'base_month' => $this->post['base_month']
            );
        } else {
            $report_args = array(
                'single_date' => date('Y-m-d', strtotime($post_reports['single_date'])),
                'base_month' => $this->post['base_month']
            );
        }


        $report_data = $this->shiftmanager_model->get_login_details($report_args);
         $header = array('Date',
            'Name',
            'Login time',
            'Logout Time',
            'Login Duration',
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {
                $d_start = new DateTime($row->clg_login_time);
                $d_end = new DateTime($row->clg_logout_time);
                $resonse_time = $d_start->diff($d_end);
                
                $resonse_time = $resonse_time->h . ':' . $resonse_time->i . ':' . $resonse_time->s;
                $inc_data[] = array(
                    'clg_login_time' => date('Y-m-d', strtotime($row->clg_login_time)),
                    'clg_first_name' => ucwords($row->clg_first_name),
                    'clg_mid_name' => ucwords($row->clg_mid_name),
                    'clg_last_name' => ucwords($row->clg_last_name),
                    'clg_login_time' => $row->clg_login_time,
                    'clg_logout_time' => $row->clg_logout_time,
                    
                );
            }
           

            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'login_logout_single_date_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/employee_login_list_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $post_reports = $this->input->post();
            $filename = "employee_login_logout_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {
               // $login_duration=date_diff($row->clg_login_time,$row->clg_logout_time);  
                 $logout_time=$row->clg_logout_time;
               if($row->clg_logout_time == "0000-00-00 00:00:00"){
                $logout_time= "Currently Login";
               }
               else{
                   $logout_time=$row->clg_logout_time;
               }
               $d_start = new DateTime($row->clg_login_time);
                $d_end = new DateTime($row->clg_logout_time);
                $resonse_time = $d_start->diff($d_end);
                
                $resonse_time = $resonse_time->h . ':' . $resonse_time->i . ':' . $resonse_time->s;
                //var_dump($resonse_time);die;
                $inc_data = array(
                    'clg_time' => date('Y-m-d', strtotime($row->clg_login_time)),
                    'clg_first_name' => ucwords($row->clg_first_name . ' ' . $row->clg_mid_name . ' ' . $row->clg_last_name),
                    'clg_login_time' => $row->clg_login_time,
                    'clg_logout_time' => $logout_time,
                    'clg_duration' => $resonse_time,
                );
                //var_dump($inc_data);die;
                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }

    function load_employee_department_report() {

        $post_reports = $this->input->post();

        $report_args = array(
            'clg_group' => $post_reports['department_name'],
            'clg_ref_id'=> $post_reports['user_id'],
            //'base_month' => $this->post['base_month']
        );

        $report_data = $this->colleagues_model->get_clg_data($report_args);
        

        $header = array('Employee Id',
            'User Name',
            'Gender',
            'Mobile No',
            'Avaya ID',
            'Designation',
            'Joining Date',
            'Address'
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {

                $inc_data[] = array(
                    'clg_ref_id' => ucfirst($row->clg_ref_id),
                    'clg_first_name' => ucfirst($row->clg_first_name),
                    'clg_mid_name' => ucfirst($row->clg_mid_name),
                    'clg_last_name' => ucfirst($row->clg_last_name),
                    'clg_gender' => ucwords($row->clg_gender),
                    'clg_avaya_id' => $row->clg_avaya_id,
                    'clg_designation' => $row->clg_designation,
                    'clg_joining_date' => $row->clg_joining_date,
                    'clg_address' => $row->clg_address,
                    'clg_mobile_no' => $row->clg_mobile_no,
                );
            }


            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'load_employee_department_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/employee_list_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "employee_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {

                $inc_data = array(
//                    'clg_ref_id' => $row->clg_ref_id,
//                    'clg_first_name' => $row->clg_first_name . ' ' . $row->clg_mid_name . ' ' . $row->clg_last_name,
//                    'clg_gender' => $row->clg_gender,
//                    'clg_mobile_no' => $row->clg_mobile_no,
//                    'clg_avaya_id' => $row->clg_avaya_id,
//                    'clg_degree' => $row->clg_degree,
//                    'clg_joining_date' => $row->clg_joining_date,
//                    'clg_address' => $row->clg_address,
                      'clg_ref_id' => strtoupper($row->clg_ref_id),
                    'clg_first_name' => ucwords($row->clg_first_name . ' ' . $row->clg_mid_name . ' ' . $row->clg_last_name),
                    'clg_gender' => ucwords($row->clg_gender),
                    'clg_mobile_no' => $row->clg_mobile_no,
                    
                    'clg_avaya_id' => $row->clg_avaya_id,
                    'clg_designation' => $row->clg_designation,
                    'clg_joining_date' => $row->clg_joining_date,
                    'clg_address' => $row->clg_address,
                    'clg_mobile_no' => $row->clg_mobile_no,
                );

                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }

    function load_pda_district_report() {

        $post_reports = $this->input->post();

        $report_args = array(
            'district_code' => $post_reports['incient_district'],
            'base_month' => $this->post['base_month']
        );



        $report_data = $this->police_model->get_inc_by_police($report_args);


        $header = array('Incident ID',
            'Call Assign Time',
            'Caller Mobile No',
            'Caller Name',
            'District Name',
            'Chief Complaint',
            'Police Chief Complaint',
            'Police Station Name',
            'Mobile No',
            'Call Reciver Name',
            'Call Assign time to Police station',
            'Duration',
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {



                $inc_data[] = array(
                    'inc_ref_id' => $row->pc_pre_inc_ref_id,
                    'pc_assign_time' => $row->pc_assign_time,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => $row->clr_fullname,
                    'po_ct_name' => $row->po_ct_name,
                    'dst_name' => $row->dst_name,
                    'police_station_name' => $row->police_station_name,
                    'p_station_mobile_no' => $row->p_station_mobile_no,
                    'pc_call_receiver_name' => $row->pc_call_receiver_name,
                    'pc_assign_call' => $row->pc_assign_call,
                    'inc_dispatch_time' => $row->inc_dispatch_time,
                    'inc_complaint' => $row->inc_complaint,
                );
            }


            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'load_pda_district_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/inc_pda_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "pda_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {

                $inc_data = array(
                    'inc_ref_id' => $row->pc_pre_inc_ref_id,
                    'pc_assign_time' => $row->pc_assign_time,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => $row->clr_fullname,
                    'dst_name' => $row->dst_name,
                    'chief' => get_cheif_complaint($row->inc_complaint),
                    'po_ct_name' => $row->po_ct_name,
                    'police_station_name' => $row->police_station_name,
                    'p_station_mobile_no' => $row->p_station_mobile_no,
                    'pc_call_receiver_name' => $row->pc_call_receiver_name,
                    'pc_assign_call' => $row->pc_assign_call,
                    'inc_dispatch_time' => $row->inc_dispatch_time,
                );

                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }

    function load_fire_district_report() {


        $post_reports = $this->input->post();

        $report_args = array(
            'district_code' => $post_reports['incient_district'],
            'base_month' => $this->post['base_month']
        );



        $report_data = $this->fire_model->get_inc_by_fire($report_args);


        $header = array('Incident ID',
            'Call Assign Time',
            'Caller Mobile No',
            'Caller Name',
            'District Name',
            'Chief Complaint',
            'Fire Chief Complaint',
            'Fire Station Name',
            'Mobile No',
            'Call Reciver Name',
            'Call Assign time to Fire station',
            'Duration',
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {


                $inc_data[] = array(
                    'inc_ref_id' => $row->fc_pre_inc_ref_id,
                    'fc_assign_time' => $row->fc_assign_time,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => $row->clr_fullname,
                    'fi_ct_name' => $row->fi_ct_name,
                    'dst_name' => $row->dst_name,
                    'fire_station_name' => $row->fire_station_name,
                    'f_station_mobile_no' => $row->f_station_mobile_no,
                    'fc_call_receiver_name' => $row->fc_call_receiver_name,
                    'fc_assign_call' => $row->fc_assign_call,
                    'inc_dispatch_time' => $row->inc_dispatch_time,
                    'inc_complaint' => $row->inc_complaint,
                );
            }


            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'load_fire_district_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/inc_fda_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "fda_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {

                $inc_data = array(
                    'inc_ref_id' => $row->fc_pre_inc_ref_id,
                    'pc_assign_time' => $row->fc_assign_time,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => $row->clr_fullname,
                    'dst_name' => $row->dst_name,
                    'chief' => get_cheif_complaint($row->inc_complaint),
                    'fi_ct_name' => $row->fi_ct_name,
                    'fire_station_name' => $row->fire_station_name,
                    'f_station_mobile_no' => $row->f_station_mobile_no,
                    'fc_call_receiver_name' => $row->fc_call_receiver_name,
                    'fc_assign_call' => $row->fc_assign_call,
                    'inc_dispatch_time' => $row->inc_dispatch_time,
                );

                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }
    function load_fuel_filling_report()
    {
        $post_reports = $this->input->post();
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }
        $report_data = $this->ambmain_model->get_fuel_filling_data($report_args);
        $header = array('Sr.No',
            'District',
            'Ambulance No',
            'Base Location',
            'Pilot Name',
            'Fuel Station Name',
            'Filling Date & Time',
            'Previous Odometer',
            'Refueling Odometer',
            'End Odometer After fueling',
            'Total KM run',
            'Fuel filling[LTR]',
            'KMPL',
            'Fuel Rate',
            'Fuel Amount',
            'Payment Mode',
            'Voucher/Card No',
            'Update Remark',
            'Enter By',
            'Update Date/Time',
        );
        if ($post_reports['reports'] == 'view') 
        {
            $inc_data = array();
            foreach ($report_data as $row) 
            {
                  
                $inc_data[] = array(
                    'District' => $row->dst_name,
                    'ff_Ambulance_No' => $row->ff_amb_ref_no,
                    'base_location' => $row->ff_base_location,
                    'pilot_name' => $row->ff_pilot_name,
                    'fuel_station_name' => $row->f_station_name,
                    'filling_date_time' => $row->ff_fuel_date_time,
                    'previous_odometer' => $row->ff_previous_odometer,
                    'refueling_odometer' => $row->ff_current_odometer,
                    'end_odometer_after_fueling' => $row->ff_end_odometer,
                    'total_KM_run' => $row->distance_travelled,
                    'fuel_filling_LTR' => $row->ff_fuel_quantity,
                    'KMPL' => $row->kmpl,
                    'fuel_rate' => number_format((float)($row->ff_amount / $row->ff_fuel_quantity), 2, '.', ''),
                    'fuel_mount' => $row->ff_amount,
                    'payment_mode' => $row->ff_payment_mode,
                    'voucher_Card_No' => $row->ff_voucher_no,
                    'update_remark' => $row->mt_on_remark,
                    'infromed_to' => '',
                    'enter_by' => $row->ff_added_by,
                    'update_date_time' => $row->ff_modify_date,
                );
            }
            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'load_fuel_filling_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/fuel_filling_data_report_view', $data, TRUE), 'list_table', TRUE);
        
        }else {
            $filename = "fuel_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            $count=1;
            foreach ($report_data as $row) {
                if($row->ff_fuel_date_time != NULL){
                    $add_date = date('Y-m-d', strtotime($row->ff_fuel_date_time));
                     $add_time = date('H:i:s', strtotime($row->ff_fuel_date_time));
                     $final_date= $add_date.'-'.$add_time;
                                 }
                                 else{
                                     $final_date= '';
                                 }
                    if($row->ff_modify_date != NULL){
                    $add_date = date('Y-m-d', strtotime($row->ff_modify_date));
                     $add_time = date('H:i:s', strtotime($row->ff_modify_date));
                     $final_date1= $add_date.'-'.$add_time;
                                 }
                                 else{
                                     $final_date1= '';
                                 }
                $inc_data = array(
                    'Count' => $count,
                    'District' => $row->dst_name,
                    'ff_Ambulance_No' => $row->ff_amb_ref_no,
                    'base_location' => $row->ff_base_location,
                    'pilot_name' => $row->ff_pilot_name,
                    'fuel_station_name' => $row->f_station_name,
                    'filling_date_time' => $final_date,
                    'previous_odometer' => $row->ff_previous_odometer,
                    'refueling_odometer' => $row->ff_current_odometer,
                    'end_odometer_after_fueling' => $row->ff_end_odometer,
                    'total_KM_run' => $row->distance_travelled,
                    'fuel_filling_LTR' => $row->ff_fuel_quantity,
                    'KMPL' => $row->kmpl,
                    'fuel_rate' => number_format((float)($row->ff_amount / $row->ff_fuel_quantity), 2, '.', ''),
                    'fuel_mount' => $row->ff_amount,
                    'payment_mode' => $row->ff_payment_mode,
                    'voucher_Card_No' => $row->ff_voucher_no,
                    'update_remark' => $row->mt_on_remark,
                    'enter_by' => ucwords($row->ff_added_by),
                    'update_date_time' => $final_date1,
                );
                $count++;
                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
        
    }
    function load_pda_report() {

        $post_reports = $this->input->post();

        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }


        $report_data = $this->police_model->get_inc_by_police($report_args);


        $header = array('Incident ID',
            'Call Assign Time',
            'Caller Mobile No',
            'Caller Name',
            'District Name',
            'Chief Complaint',
            'Police Chief Complaint',
            'Police Station Name',
            'Mobile No',
            'Call Receiver Name',
            'Call Assign time to Police station',
            'Duration',
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {



                $inc_data[] = array(
                    'inc_ref_id' => $row->pc_pre_inc_ref_id,
                    'pc_assign_time' => $row->pc_assign_time,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => ucwords($row->clr_fname).' '.ucwords($row->clr_lname),
                    'po_ct_name' => $row->po_ct_name,
                    'dst_name' => $row->dst_name,
                    'police_station_name' => $row->police_station_name,
                    'p_station_mobile_no' => $row->p_station_mobile_no,
                    'pc_call_receiver_name' => $row->pc_call_receiver_name,
                    'pc_assign_call' => $row->pc_assign_call,
                    'inc_dispatch_time' => $row->inc_dispatch_time,
                    'inc_complaint' => $row->inc_complaint,
                );
            }


            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'load_pda_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/inc_pda_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "pda_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {

                $inc_data = array(
                    'inc_ref_id' => $row->pc_pre_inc_ref_id,
                    'pc_assign_time' => $row->pc_assign_time,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => ucwords($row->clr_fname).' '.ucwords($row->clr_lname),
                    'dst_name' => $row->dst_name,
                    'chief' => get_cheif_complaint($row->inc_complaint),
                    'po_ct_name' => $row->po_ct_name,
                    'police_station_name' => $row->police_station_name,
                    'p_station_mobile_no' => $row->p_station_mobile_no,
                    'pc_call_receiver_name' => $row->pc_call_receiver_name,
                    'pc_assign_call' => $row->pc_assign_call,
                    'inc_dispatch_time' => $row->inc_dispatch_time,
                );

                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }

    function load_fire_report() {

        $post_reports = $this->input->post();

        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }


        $report_data = $this->fire_model->get_inc_by_fire($report_args);

        $header = array('Incident ID',
            'Call Assign Time',
            'Caller Mobile No',
            'Caller Name',
            'District Name',
            'Chief Complaint',
            'Fire Chief Complaint',
            'Fire Station Name',
            'Mobile No',
            'Call Reciver Name',
            'Call Assign time to Fire station',
            'Duration',
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {



                $inc_data[] = array(
                    'inc_ref_id' => $row->fc_pre_inc_ref_id,
                    'fc_assign_time' => $row->fc_assign_time,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => $row->clr_fullname,
                    'fi_ct_name' => $row->fi_ct_name,
                    'dst_name' => $row->dst_name,
                    'fire_station_name' => $row->fire_station_name,
                    'f_station_mobile_no' => $row->f_station_mobile_no,
                    'fc_call_receiver_name' => $row->fc_call_receiver_name,
                    'fc_assign_call' => $row->fc_assign_call,
                    'inc_dispatch_time' => $row->inc_dispatch_time,
                    'inc_complaint' => $row->inc_complaint,
                );
            }


            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = 'load_fire_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/inc_fda_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "fire_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {

                $inc_data = array(
                    'inc_ref_id' => $row->fc_pre_inc_ref_id,
                    'fc_assign_time' => $row->fc_assign_time,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => $row->clr_fullname,
                    'dst_name' => $row->dst_name,
                    'chief' => get_cheif_complaint($row->inc_complaint),
                    'fi_ct_name' => $row->fi_ct_name,
                    'fire_station_name' => $row->fire_station_name,
                    'f_station_mobile_no' => $row->f_station_mobile_no,
                    'fc_call_receiver_name' => $row->fc_call_receiver_name,
                    'fc_assign_call' => $row->fc_assign_call,
                    'inc_dispatch_time' => $row->inc_dispatch_time,
                );

                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }

    function closure_dco_report() {

        $post_reports = $this->input->post();

        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }


        $report_data = $this->inc_model->get_epcr_by_month($report_args);
       // var_dump($report_data);
      //  die();

      $header = array('Incident ID',
            'Incident Date /Time',
            'Closure Date / Time',
            'Ambulance No',
            'Base Location',
            'Patient Name',
            'Age',
            'Gender',
            'District',
            'Address',
            'Inc. Area Type',
            'LOC',
            'Provider Impression',
            'Provider Impression Other',
            'Receiving Hospital Name',
            'Other-Receiving Hospital',
            'Previous Odometer',
            'Start Odometer',
            'Scene Odometer',
            'Hospital Odometer',
            'End Odometer',
            'Total Distance Travel',
            'Response Time Remark',
            'Odometer Difference Remark',
            'Remark',
            'DCO ID'
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {
                
              
                $incient_district = $this->inc_model->get_district_by_id($row['district_id']);
                $dst_name = $incient_district->dst_name;

                $city_id = $this->inc_model->get_city_by_id($row['city_id'], $row['district_id']);
                $cty_name = $city_id->cty_name;


                $transport_respond_amb_no = $row['amb_rto_register_no'];


                $call_recived_date = date('Y-m-d', strtotime($row['inc_date']));
                $inc_time = explode(" ", $row['inc_date']);

                $driver_data = $this->pcr_model->get_driver(array('dp_pcr_id' => $row['id']));

                $base_loc_time = $call_recived_date . ' ' . $driver_data[0]->dp_started_base_loc;

                $time1 = $driver_data[0]->dp_reach_on_scene;

                $time2 = $driver_data[0]->dp_started_base_loc;

                $time1 = explode(' ', $time1);
                $time2 = explode(' ', $time2);
                
                $time1 = new DateTime(date('Y-m-d H:i:s', strtotime( $driver_data[0]->dp_reach_on_scene)));
                $time2 = new DateTime(date('Y-m-d H:i:s', strtotime($driver_data[0]->dp_started_base_loc)));
                

                
//                $minutes1 = ($array1[0] * 60 + $array1[1]);
//                $minutes2 = ($array2[0] * 60 + $array2[1]);

                //$diff = $minutes1 - $minutes2;
               // $diff = date_diff($time2, $time1);
               // $resonse_time = '';


                if ($driver_data[0]->dp_started_base_loc != '00:00:00') {

                    $base_loc_time = new DateTime(date('Y-m-d H:i:s', strtotime($base_loc_time)));
                    $inc_datetime = new DateTime(date('Y-m-d H:i:s', strtotime($row['inc_date'])));
                    $resonse_time = date_diff($base_loc_time, $inc_datetime);
                    $resonse_time = $resonse_time->h . ':' . $resonse_time->i . ':' . $resonse_time->s;
                }
//                if ($diff > 0) {
//                    $resonse_time = $diff . ' Minutes';
//                } else {
//                    $resonse_time = '0 Minutes';
//                }

                $amb_arg = array('rg_no' => $row['amb_reg_id']);
                $amb_data = $this->amb_model->get_amb_data($amb_arg);
                $amb_base_location = $amb_data[0]->hp_name;


                //  $resonse_time = '';   
                // var_dump($resonse_time);
                if ($row['rec_hospital_name'] == '0') {
                    $hp_name = 'On scene care';
                } else if ($row['rec_hospital_name'] == 'Other') {
                    $hp_name = 'Other';
                } else {
                    $hp_name = $row['hp_name'];
                }
                $end_odo=get_end_odo_remark($driver_data[0]->responce_time_remark);

                $inc_data[] = array(
                    'inc_datetime' => $row['inc_date_time'],
                    'inc_date' => $row['dp_date'],
                    'inc_ref_id' => $row['inc_ref_id'],
                    'response_time' => $resonse_time,
                    'amb_rto_register_no' => $row['amb_reg_id'],
                    'patient_name' => $row['ptn_fname']." ".$row['ptn_lname'],
                    'ptn_age' => $row['ptn_age'],
                    'ptn_gender' => $row['ptn_gender'],
                    'district' => $dst_name,
                    'cty_name' => $cty_name,
                    'locality' => $row['locality'],
                    'inc_area_type' => $row['inc_area_type'],
                    'level_type' => $row['level_type'],
                    'provier_img' => $row['pro_name'],
                    'other_provider_img' => $row['other_provider_img'],
                    'base_location' => $hp_name,
                    'other_receiving_host' => $row['other_receiving_host'],
                    'amb_base_location' => $amb_base_location,
                    'operate_by' => $row['operate_by'],
                    'start_odo' => $row['start_odometer'],
                    'scene_odometer' => $row['scene_odo'],
                    'hospital_odometer' => $row['hospital_odo'],
                    'end_odo' => $row['end_odometer'],
                    'total_km' => $row['total_km'],
                    'odo_remark' => $end_odo,
                    'remark' => $row['remark'],
                    'dco_id' => $row['operate_by']
                );
            }


            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;


            $this->output->add_to_position($this->load->view('frontend/erc_reports/inc_closure_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "closure_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {

                $incient_district = $this->inc_model->get_district_by_id($row['district_id']);
                $dst_name = $incient_district->dst_name;

                $city_id = $this->inc_model->get_city_by_id($row['city_id'], $row['district_id']);
                $cty_name = $city_id->cty_name;


                $transport_respond_amb_no = $row['amb_rto_register_no'];


                $call_recived_date = date('Y-m-d', strtotime($row['inc_date']));
                $inc_time = explode(" ", $row['inc_date']);



                $amb_arg = array('rg_no' => $row['amb_reg_id']);
                $amb_data = $this->amb_model->get_amb_data($amb_arg);
                $amb_base_location = $amb_data[0]->hp_name;

                if ($row['rec_hospital_name'] == '0') {
                    $hp_name = 'Other';
                } else if ($row['rec_hospital_name'] == 'Other') {
                    $hp_name = 'Other';
                } else {
                    $hp_name = $row['hp_name'];
                }
                if($row['inc_date_time'] != NULL){
                    $add_date = date('Y-m-d', strtotime($row['inc_date_time']));
                     $add_time = date('H:i:s', strtotime($row['inc_date_time']));
                     $final_date= $add_date.'-'.$add_time;
                                 }
                                 else{
                                     $final_date= '';
                                 }
                                 if($row['dp_date'] != NULL){
                    $add_date = date('Y-m-d', strtotime($row['dp_date']));
                     $add_time = date('H:i:s', strtotime($row['dp_date']));
                     $final_date1= $add_date.'-'.$add_time;
                                 }
                                 else{
                                     $final_date1= '';
                                 }
                $end_odo=get_end_odo_remark($driver_data[0]->responce_time_remark);
                $inc_data = array(
                    'inc_ref_id' => $row['inc_ref_id'],
                    'inc_date' => $final_date,
                    'inc_date1' => $final_date1,
                    'amb_rto_register_no' => $row['amb_reg_id'],
                    'amb_base_location' => $amb_base_location,
                    'patient_name' => $row['ptn_fname']." ".$row['ptn_lname'],
                    'ptn_age' => $row['ptn_age'],
                    'ptn_gender' => $row['ptn_gender'],
                    'district' => $dst_name,
                    'locality' => $row['locality'],
                    'inc_area_type'=>$row['inc_area_type'],
                    'level_type' => $row['level_type'],
                    'provier_img' => $row['pro_name'],
                    'other_provider_img' => $row['other_provider_img'],
                    'base_location' => $hp_name,
                    'other_receiving_host' => $row['other_receiving_host'],
                    'start_odo' => $row['start_odometer'],
                    'start_odo1' => $row['start_odometer'],
                    'scene_odometer' => $row['scene_odo'],
                    'hospital_odometer' => $row['hospital_odo'],
                    'end_odo' => $row['end_odometer'],
                    'total_km' => $row['total_km'],
                    
                    'odo_remark' => $end_odo,
                    'remark' => $row['remark'],
                    'dco_id' => ucwords($row['operate_by'])
                );

                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }

    function closure_response_time_report() {

        $post_reports = $this->input->post();

        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }


        $report_data = $this->inc_model->get_epcr_by_month($report_args);



        $header = array('Incident ID',
            'Incident Date /Time',
            'Closure Date / Time',
            'Ambulance No',
            'Base Location',
            'Patient Name',
            'Call Receiving Time',
            'Disconnected Time',
            'Start From Base',
            'At Scene',
            'From Scene',
            'At Hospital',
            'Handover Time',
            'Back To Base',
            'Response Time',
            'Response Time Remark',
            'Operate by',
            'Added by'
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {

//                var_dump($row);
                $incient_district = $this->inc_model->get_district_by_id($row['district_id']);
                $dst_name = $incient_district->dst_name;

                $city_id = $this->inc_model->get_city_by_id($row['city_id'], $row['district_id']);
                $cty_name = $city_id->cty_name;


                $transport_respond_amb_no = $row['amb_rto_register_no'];


                $amb_arg = array('rg_no' => $row['amb_reg_id']);
                $amb_data = $this->amb_model->get_amb_data($amb_arg);
                $amb_base_location = $amb_data[0]->hp_name;


                //  $resonse_time = '';   
                // var_dump($resonse_time);
                if ($row['rec_hospital_name'] == '0') {
                    $hp_name = 'Other';
                } else if ($row['rec_hospital_name'] == 'Other') {
                    $hp_name = 'Other';
                } else {
                    $hp_name = $row['hp_name'];
                }

                $inc_data[] = array(
                    'inc_date' => $row['inc_date_time'],
                    'closer_date' => $row['dp_date'],
                    'inc_ref_id' => $row['inc_ref_id'],
                    'response_time' => $row['responce_time'],
                    'amb_rto_register_no' => $row['amb_reg_id'],
                    'patient_name' => $row['ptn_fname']." ".$row['ptn_lname'],
                    'ptn_age' => $row['ptn_age'],
                    'ptn_gender' => $row['ptn_gender'],
                    'district' => $dst_name,
                    'cty_name' => $cty_name,
                    'locality' => $row['locality'],
                    'level_type' => $row['level_type'],
                    'provier_img' => $row['pro_name'],
                    'base_location' => $hp_name,
                    'amb_base_location' => $amb_base_location,
                    'operate_by' => $row['operate_by'],
                    'start_odo' => $row['start_odometer'],
                    'end_odo' => $row['end_odometer'],
                    'remark' => $row['remark'],
                    'total_km' => $row['total_km'],
                    'dp_started_base_loc' => $row['dp_started_base_loc'],
                    'dp_on_scene' => $row['dp_on_scene'],
                    'dp_hosp_time' => $row['dp_hosp_time'],
                    'start_from_base' => $row['start_from_base'],
                    'responce_time' => $row['responce_time'],
                    'remark_title' => $row['remark_title'],
                    'dp_hand_time' => $row['dp_hand_time'],
                    'dp_back_to_loc' => $row['dp_back_to_loc'],
                    'dp_cl_from_desk' => $row['dp_cl_from_desk'],
                    'dp_reach_on_scene' => $row['dp_reach_on_scene'],
                    'inc_datetime'=>$row['inc_datetime'],
                    'inc_recive_time'=>$row['inc_recive_time'],
                    'inc_added_by' => $row['inc_added_by']
                );
            }

            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/inc_response_time_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
           // var_dump($report_data);die();
            $filename = "closure_response_time_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {

                
                $incient_district = $this->inc_model->get_district_by_id($row['district_id']);
                $dst_name = $incient_district->dst_name;

                $city_id = $this->inc_model->get_city_by_id($row['city_id'], $row['district_id']);
                $cty_name = $city_id->cty_name;


                $transport_respond_amb_no = $row['amb_rto_register_no'];


                $amb_arg = array('rg_no' => $row['amb_reg_id']);
                $amb_data = $this->amb_model->get_amb_data($amb_arg);
                $amb_base_location = $amb_data[0]->hp_name;


                //  $resonse_time = '';   
                // var_dump($resonse_time);
                if ($row['rec_hospital_name'] == '0') {
                    $hp_name = 'Other';
                } else if ($row['rec_hospital_name'] == 'Other') {
                    $hp_name = 'Other';
                } else {
                    $hp_name = $row['hp_name'];
                }
               $dp_cl_from_desk= date("H:i:s", strtotime($row['inc_recive_time']));
               $inc_datetime= date("H:i:s", strtotime($row['inc_datetime']));
              
               if($row['inc_date_time'] != NULL){
                $add_date = date('Y-m-d', strtotime($row['inc_date_time']));
                 $add_time = date('H:i:s', strtotime($row['inc_date_time']));
                 $final_date= $add_date.'-'.$add_time;
                             }
                             else{
                                 $final_date= '';
                             }
                 
                 if($row['dp_date'] != NULL){
                $add_date = date('Y-m-d', strtotime($row['dp_date']));
                 $add_time = date('H:i:s', strtotime($row['dp_date']));
                 $clousre_date= $add_date.'-'.$add_time;
                             }
                             else{
                                 $clousre_date= '';
                             }  
                
                             $duration = date('H:i:s', strtotime($row['responce_time']));
                             $start_base = date('H:i:s', strtotime($row['start_from_base']));
                $inc_data = array(
                    'inc_ref_id' => $row['inc_ref_id'],
                    'inc_date' => $final_date,
                    'closer_date' => $clousre_date,
                    //'response_time' => $row['responce_time'],
                    'amb_rto_register_no' => $row['amb_reg_id'],
                    'amb_base_location' => $amb_base_location,
                    'patient_name' => $row['ptn_fname']." ".$row['ptn_lname'],
                    'dp_cl_from_desk' => $dp_cl_from_desk,
                    'disconnectted time' => $inc_datetime,
                    'start_from_base' => $start_base ,
                    'dp_on_scene' => $row['dp_on_scene'],
                    'dp_reach_on_scene' => $row['dp_reach_on_scene'],
                    'dp_hosp_time' => $row['dp_hosp_time'],
                    'dp_hand_time' => $row['dp_hand_time'],
                    'dp_back_to_loc' => $row['dp_back_to_loc'],
                    'responce_time' => $duration,
                    'remark_title' => $row['remark_title'],
                    'operate_by' => ucwords($row['operate_by']),
                    'added_by' => ucwords($row['inc_added_by']),
                );

                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }

    function closure_consumable_report() {

        $post_reports = $this->input->post();

        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }


        $report_data = $this->inc_model->get_epcr_by_month($report_args);


        $header = array('Incident ID',
            'Incident Date /Time',
            'Closure Date / Time',
            'Ambulance No',
            'Patient Name',
            'Provider Impression',
            'Consumable-Quantity',
            'Non-Consumable - Quantity',
            'Medicine-Quantity',
            'Operate by'
        );

        if ($post_reports['reports'] == 'view') {

            $inc_data = array();
            foreach ($report_data as $row) {
               //var_dump($report_data);die;
                $cons_args = array(
                    'as_sub_id' => $row['epcr_id'],
                    'as_item_type' => 'CA',
                );
                $consumable_data = $this->inc_model->get_consumable_data($cons_args);
                // var_dump($consumable_data);die;

                $cons_args = array(
                    'as_sub_id' => $row['epcr_id'],
                    'as_item_type' => 'NCA',
                );
                $non_consumable_data = $this->inc_model->get_consumable_data($cons_args);
               // var_dump($non_consumable_data);die;
                $cons_args = array(
                    'as_sub_id' => $row['epcr_id'],
                    'as_item_type' => 'MED',
                );
                $med_consumable_data = $this->inc_model->get_consumable_data($cons_args);
                //var_dump($med_consumable_data);die;  



                $incient_district = $this->inc_model->get_district_by_id($row['district_id']);
                $dst_name = $incient_district->dst_name;

                $city_id = $this->inc_model->get_city_by_id($row['city_id'], $row['district_id']);
                $cty_name = $city_id->cty_name;


                $transport_respond_amb_no = $row['amb_rto_register_no'];

                $amb_arg = array('rg_no' => $row['amb_reg_id']);
                $amb_data = $this->amb_model->get_amb_data($amb_arg);
                $amb_base_location = $amb_data[0]->hp_name;

                if ($row['rec_hospital_name'] == '0') {
                    $hp_name = 'On scene care';
                } else if ($row['rec_hospital_name'] == 'Other') {
                    $hp_name = 'Other';
                } else {
                    $hp_name = $row['hp_name'];
                }

                $inc_data[] = array(
                    'inc_date' => $row['inc_date_time'],
                    'closer_date' => $row['dp_date'],
                    'inc_ref_id' => $row['inc_ref_id'],
                    'response_time' => $resonse_time,
                    'amb_rto_register_no' => $row['amb_reg_id'],
                    'patient_name' => $row['ptn_fname'],
                    'ptn_age' => $row['ptn_age'],
                    'ptn_gender' => $row['ptn_gender'],
                    'district' => $dst_name,
                    'cty_name' => $cty_name,
                    'locality' => $row['locality'],
                    'level_type' => $row['level_type'],
                    'provier_img' => $row['pro_name'],
                    'base_location' => $hp_name,
                    'amb_base_location' => $amb_base_location,
                    'operate_by' => $row['operate_by'],
                    'start_odo' => $row['start_odometer'],
                    'end_odo' => $row['end_odometer'],
                    'remark' => $row['remark'],
                    'total_km' => $row['total_km'],
                    'dp_started_base_loc' => $row['dp_started_base_loc'],
                    'dp_on_scene' => $row['dp_on_scene'],
                    'dp_hosp_time' => $row['dp_hosp_time'],
                    'start_from_base' => $row['start_from_base'],
                    'responce_time' => $row['responce_time'],
                    'remark_title' => $row['remark_title'],
                    'dp_hand_time' => $row['dp_hand_time'],
                    'dp_back_to_loc' => $row['dp_back_to_loc'],
                    'dp_cl_from_desk' => $row['dp_cl_from_desk'],
                    'dp_reach_on_scene' => $row['dp_reach_on_scene'],
                    'consumable_quantity' => $consumable_data[0]['count'],
                    'non_consumable_quantity' => $non_consumable_data[0]['count'],
                    'medicine_quantity' => $med_consumable_data[0]['count'],
                );
            }


            $data['header'] = $header;
            $data['inc_data'] = $inc_data;
            $data['report_args'] = $report_args;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/inc_consumable_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "closure_consumable_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $inc_data = array();
            foreach ($report_data as $row) {
                $cons_args = array(
                    'as_sub_id' => $row['epcr_id'],
                    'as_item_type' => 'CA',
                );
                $consumable_data = $this->inc_model->get_consumable_data($cons_args);


                $cons_args = array(
                    'as_sub_id' => $row['epcr_id'],
                    'as_item_type' => 'NCA',
                );
                $non_consumable_data = $this->inc_model->get_consumable_data($cons_args);

                $cons_args = array(
                    'as_sub_id' => $row['epcr_id'],
                    'as_item_type' => 'MED',
                );
                $med_consumable_data = $this->inc_model->get_consumable_data($cons_args);




                $incient_district = $this->inc_model->get_district_by_id($row['district_id']);
                $dst_name = $incient_district->dst_name;

                $city_id = $this->inc_model->get_city_by_id($row['city_id'], $row['district_id']);
                $cty_name = $city_id->cty_name;


                $transport_respond_amb_no = $row['amb_rto_register_no'];

                $amb_arg = array('rg_no' => $row['amb_reg_id']);
                $amb_data = $this->amb_model->get_amb_data($amb_arg);
                $amb_base_location = $amb_data[0]->hp_name;

                if ($row['rec_hospital_name'] == '0') {
                    $hp_name = 'On scene care';
                } else if ($row['rec_hospital_name'] == 'Other') {
                    $hp_name = 'Other';
                } else {
                    $hp_name = $row['hp_name'];
                }

                if($row['inc_date_time'] != NULL){
                    $add_date = date('Y-m-d', strtotime($row['inc_date_time']));
                     $add_time = date('H:i:s', strtotime($row['inc_date_time']));
                     $final_date= $add_date.'-'.$add_time;
                                 }
                                 else{
                                     $final_date= '';
                                 }
                
                 if($row['dp_date'] != NULL){
                    $add_date = date('Y-m-d', strtotime($row['dp_date']));
                     $add_time = date('H:i:s', strtotime($row['dp_date']));
                     $clousre_date= $add_date.'-'.$add_time;
                                 }
                                 else{
                                     $clousre_date= '';
                                 }

                $inc_data = array(
                    'inc_ref_id' => $row['inc_ref_id'],
                    'inc_date' => $final_date,
                    'closer_date' => $clousre_date,
                    'amb_rto_register_no' => $row['amb_reg_id'],
                    'patient_name' => $row['ptn_fname'],
                    'provier_img' => $row['pro_name'],
                    'consumable_quantity' => $consumable_data[0]['count'],
                    'non_consumable_quantity' => $non_consumable_data[0]['count'],
                    'medicine_quantity' => $med_consumable_data[0]['count'],
                    'operate_by' => ucwords($row['operate_by']),
                );

                fputcsv($fp, $inc_data);
            }
            fclose($fp);
            exit;
        }
    }
    //Shift Roster Report
    function shift_roster_report_view()
    {
        //var_dump('hii');die();
        $post_reports = $this->input->post();
        
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
        $base_month = $this->common_model->get_base_month($from_date);
        $base_month =$base_month[0]->months;

        if ($post_reports['to_date'] != '') {

            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $base_month
              );
              
        } else if($post_reports['to_date'] != '' && $post_reports['from_date'] != '') {

            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $base_month
               );
            
        }else{

            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $base_month
                );
        }
        
        if($post_reports['time'] != '' ){
            if($post_reports['time'] == '1'){
                $to_time = "00:00:00";
                $from_time = "01:00:00";
            }else if($post_reports['time'] == '2'){
                $to_time = "01:00:01";
                $from_time = "02:00:00";
            }else if($post_reports['time'] == '3'){
                $to_time = "02:00:01";
                $from_time = "03:00:00";
            }else if($post_reports['time'] == '4'){
                $to_time = "03:00:01";
                $from_time = "04:00:00";
            }else if($post_reports['time'] == '5'){
                $to_time = "04:00:01";
                $from_time = "05:00:00";
            }else if($post_reports['time'] == '6'){
                $to_time = "05:00:01";
                $from_time = "06:00:00";
            }else if($post_reports['time'] == '7'){
                $to_time = "06:00:01";
                $from_time = "07:00:00";
            }else if($post_reports['time'] == '8'){
                $to_time = "07:00:01";
                $from_time = "08:00:00";
            }else if($post_reports['time'] == '9'){
                $to_time = "08:00:01";
                $from_time = "09:00:00";
            }else if($post_reports['time'] == '10'){
                $to_time = "09:00:01";
                $from_time = "10:00:00";
            }else if($post_reports['time'] == '11'){
                $to_time = "10:00:01";
                $from_time = "11:00:00";
            }else if($post_reports['time'] == '12'){
                $to_time = "11:00:01";
                $from_time = "12:00:00";
            }else if($post_reports['time'] == '13'){
                $to_time = "12:00:01";
                $from_time = "13:00:00";
            }else if($post_reports['time'] == '14'){
                $to_time = "13:00:01";
                $from_time = "14:00:00";
            }else if($post_reports['time'] == '15'){
                $to_time = "14:00:01";
                $from_time = "15:00:00";
            }else if($post_reports['time'] == '16'){
                $to_time = "15:00:01";
                $from_time = "16:00:00";
            }else if($post_reports['time'] == '17'){
                $to_time = "16:00:01";
                $from_time = "17:00:00";
            }else if($post_reports['time'] == '18'){
                $to_time = "17:00:01";
                $from_time = "18:00:00";
            }else if($post_reports['time'] == '19'){
                $to_time = "18:00:01";
                $from_time = "19:00:00";
            }else if($post_reports['time'] == '20'){
                $to_time = "19:00:01";
                $from_time = "20:00:00";
            }else if($post_reports['time'] == '21'){
                $to_time = "21:00:01";
                $from_time = "22:00:00";
            }else if($post_reports['time'] == '22'){
                $to_time = "22:00:01";
                $from_time = "23:00:00";
            }else if($post_reports['time'] == '23'){
                $to_time = "23:00:01";
                $from_time = "23:59:59";
            }
            $from_date = $post_reports['from_date']." ".$to_time;
            $to_date = $post_reports['from_date']." ".$from_time;
            
               $report_args = array('from_datetime' => date('Y-m-d H:i:s', strtotime($from_date)),
                'to_datetime' => date('Y-m-d H:i:s', strtotime($to_date)),
                'time'=>$post_reports['time'],
                'base_month' => $base_month
                );
                $report_args['from_date'] = $post_reports['from_date'];
        }


        $incident_data = $this->ambmain_model->get_incident_data($report_args);
        $EM=array('NON_MCI','AD_SUP_REQ','DROP_BACK','IN_HO_P_TR','MCI','EMT_MED_AD','PREGANCY_CALL','VIP_CALL','Child_CARE_CALL','on_scene_care','PICK_UP');
        $Non_EM=array('ABUSED_CALL','APP_CALL','AMB_NOT_AVA','CHILD_CALL','DEMO_CALL','DISS_CON_CALL','DUP_CALL','AMB_TO_ERC','ENQ_CALL','ESCALATION_CALL','FOLL_CALL','GEN_ENQ','MISS_CALL','NO_RES_CALL','NUS_CALL','SERVICE_NOT_REQUIRED','SLI_CALL','SUGG_CALL','TEST_CALL','UNATT_CALL','WRONG_CALL','TRANS_CALL_108','CALL_TRANS_102');
        $trans_call = array('TRANS_PDA','TRANS_FDA');
        if($incident_data){
            $emergency=0;
            $non_emergency=0;
            $transcall = 0;
            $total_calls = 0;
            foreach ($incident_data as $report) 
            {
                
                $user_id = strtolower($report->inc_added_by);
                $roaster_data[$user_id]['brk_resonse_time'] =0;
                $roaster_data[$user_id]['user_id'] = $user_id;
                $quality_args = array(
                    'base_month' =>$base_month,
                    'user_type' => 'ERO',
                   // 'from_date' =>  date('Y-m-d', strtotime($from_date)), 
                   // 'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                    'qa_ad_user_ref_id' => $user_id);
                
                if($post_reports['time'] != '' ){
                    $quality_args['from_datetime']= date('Y-m-d', strtotime($post_reports['from_date'])).' '.$to_time;
                    $quality_args['to_datetime']= date('Y-m-d', strtotime($post_reports['from_date'])).' '.$from_time;
                }else{
                     $quality_args['from_date'] = date('Y-m-d', strtotime($from_date));
                    $quality_args['to_date'] = date('Y-m-d', strtotime($post_reports['to_date']));
                }
              
                    //Audit score
                $audit_details = $this->quality_model->get_quality_audit($quality_args);
                $fetal_count = 0;
                $quality_score =0;
                foreach ($audit_details as $audit) 
                {
                    $quality_score = $quality_score +  $audit->quality_score;
                    if($audit->quality_score == 0)
                    {
                         $fetal_count = $fetal_count+1; 
                        
                    }
                 }
                $roaster_data[$user_id]['quality_score'] = $quality_score;
                $roaster_data[$user_id]['quality_count'] = count($audit_details);
                $roaster_data[$user_id]['fetal_count'] = $fetal_count;
                $break_info = $this->ambmain_model->get_break_details($quality_args);

              //var_dump($break_info);
                $total_brk_time =$break_info[0]->brk_total;

                $brk_hours   = floor($total_brk_time / 3600);
                $brk_minutes = $total_brk_time / 60 % 60;
                $brk_seconds = $total_brk_time % 60;
                
                $hours   = str_pad( $brk_hours,   2, '0', STR_PAD_LEFT);
                $minutes = str_pad( $brk_minutes, 2, '0', STR_PAD_LEFT);
                $seconds = str_pad( $brk_seconds, 2, '0', STR_PAD_LEFT);
                $brk_time = $hours.':'.$minutes.':'.$seconds;
                //$roaster_data[$user_id]['brk_resonse_time'] = $resonse_time;
                $roaster_data[$user_id]['brk_resonse_time'] = $brk_time;
                
                $login_info = $this->ambmain_model->get_login_details($quality_args);
                $total_time=$login_info[0]->login_total;

                $hours   = floor($total_time / 3600);
                $minutes = $total_time / 60 % 60;
                $seconds = $total_time % 60;
                $hours   = str_pad( $hours,   2, '0', STR_PAD_LEFT);
                $minutes = str_pad( $minutes, 2, '0', STR_PAD_LEFT);
                $seconds = str_pad( $seconds, 2, '0', STR_PAD_LEFT);
                $resonse_time = $hours.':'.$minutes.':'.$seconds;
                $roaster_data[$user_id]['total_time'] = $resonse_time;
                
                
               if (isset($report->inc_added_by))
                {
                    if(!in_array(strtolower($report->inc_added_by), (array) $roaster_data[$user_id]['user_id'])) 
                    {
                       // $roaster_data[$report->inc_added_by]['user_id'] = $report->inc_added_by;
                        if (in_array($report->inc_type, $EM))
                        {
                            
                            $roaster_data[$user_id]['Emergency'] = $roaster_data[$user_id]['Emergency']+1;
                            
                        }
                        
                        if(in_array($report->inc_type, $Non_EM)){
                            
                            $roaster_data[$user_id]['Non_Emergency'] = $roaster_data[$user_id]['Non_Emergency']+1;
                       }
                       if(in_array($report->inc_type, $trans_call)){
                            
                        $roaster_data[$user_id]['Transfer_call'] = $roaster_data[$user_id]['Transfer_call']+1;
                   }
                     
                       $roaster_data[$user_id]['total_count'] = $roaster_data[$user_id]['total_count']+1;
                        
                    }else{
                        $roaster_data[$user_id]['user_id'] = strtolower($report->inc_added_by);
                        if (in_array($report->inc_type, $EM)){
                            $roaster_data[$user_id]['Emergency'] = $roaster_data[$user_id]['Emergency']+1;
                            
                        }
                        
                        if(in_array($report->inc_type, $Non_EM)){
                            $roaster_data[$user_id]['Non_Emergency'] = $roaster_data[$user_id]['Non_Emergency']+1;
                       }

                       if(in_array($report->inc_type, $trans_call)){
                        $roaster_data[$user_id]['Transfer_call'] = $roaster_data[$user_id]['Transfer_call']+1;
                   }
                     
                       $roaster_data[$user_id]['total_count'] = $roaster_data[$user_id]['total_count']+1;
                    }
                    
                }   
            }
            
            
        }
      // var_dump($roaster_data);die();
        $header = array('Sr.No','ERO Name','Avaya ID','EM Calls','Non EM Calls','Transfer Call To FDA/PDA' ,'Total Calls', 'Dispatch Count', 'Quality Score','Fatal Count','Login Hours','Break');
        $main_file_name = strtotime($post_reports['from_date']);
        $filename = "shiftroster_" . $main_file_name . ".csv";
        $this->output->set_focus_to = "inc_ref_id";
        if ($post_reports['reports'] == 'view') {
            
            
            $data['header'] = $header;
            $data['shift_roster'] = $roaster_data;
            $data['report_args'] = $report_args;
            $data['submit_function'] = 'shift_roster_report_view';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/shift_roster_report_view', $data, TRUE),'list_table', TRUE);
            
        }else {
            //var_dump($roaster_data);die();
            $filename = "shift_roster_report.csv";
            $fp = fopen('php://output', 'w');
            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $count = 1;
            $total_quality_score = 0;
            
            foreach ($roaster_data as $row) {
               // var_dump($row['clg_avaya_id']);die();
                
                $clg_data=get_clg_data_by_ref_id($row['user_id']);
                
                $total_eme = $total_eme+$row['Emergency'];
                $total_eme_non = $total_eme_non + $row['Non_Emergency'];
                $total_trans = $total_trans + $row['Transfer_call'];
                $total_calls =  $total_calls + $row['total_count'];
                $fetal_count = $fetal_count+$row['fetal_count'];
                
                if($main_data['quality_count'] > 0) { 
                    $score_quality =  $row['quality_score']/$row['quality_count']; 
                    $total_quality_score = $total_quality_score + $score_quality;
                }else{
                    $score_quality = 0;
                }
                sscanf($row['total_time'], "%d:%d:%d", $hours, $minutes, $seconds);

                $login_time_seconds = isset($hours) ? $hours * 3600 + $minutes * 60 + $seconds : $minutes * 60 + $seconds;
        $login_time_seconds_total = $login_time_seconds +$login_time_seconds_total;
        
          
        sscanf($row['brk_resonse_time'], "%d:%d:%d", $b_hours, $b_minutes, $b_seconds);

        $break_time_seconds = isset($b_hours) ? $b_hours * 3600 + $b_minutes * 60 + $b_seconds : $b_minutes * 60 + $b_seconds;
        $break_time_seconds_total = $break_time_seconds_total+$break_time_seconds;
                
                $data = array(
                    'Sr.No' => $count,
                    'user_id' => ucfirst($row['user_id']),
                    'Avaya ID' => $clg_data[0]->clg_avaya_id,
                    'EM Calls' => $row['Emergency']?$row['Emergency']:0,
                    'Non EM Calls' => $row['Non_Emergency']?$row['Non_Emergency']:0,
                    'Transfer Calls' => $row['Transfer_call']?$row['Transfer_call']:0,
                    'Total Calls' => $row['total_count']?$row['total_count']:0,
                    'Disptach Count' => $row['Emergency']?$row['Emergency']:0,
                    'Quality Score' => $score_quality.'%',
                    'fetal_count' => $row['fetal_count'],
                    'Login Hours' => $row['total_time'],
                    'Break' => $row['brk_resonse_time']
                );
                fputcsv($fp,$data);
                $count++;
            }
                     $login_hours   = floor($login_time_seconds_total / 3600);
                $login_minutes = $login_time_seconds_total / 60 % 60;
                $login_seconds = $login_time_seconds_total % 60;
                $hours   = str_pad( $login_hours,   2, '0', STR_PAD_LEFT);
                $minutes = str_pad( $login_minutes, 2, '0', STR_PAD_LEFT);
                $seconds = str_pad( $login_seconds, 2, '0', STR_PAD_LEFT);
                $resonse_time = $hours.':'.$minutes.':'.$seconds;
                
                $break_hours   = floor($break_time_seconds_total / 3600);
                $break_minutes = $break_time_seconds_total / 60 % 60;
                $break_seconds = $break_time_seconds_total % 60;
                $hours_b   = str_pad( $break_hours,   2, '0', STR_PAD_LEFT);
                $minutes_b = str_pad( $break_minutes, 2, '0', STR_PAD_LEFT);
                $seconds_b = str_pad( $break_seconds, 2, '0', STR_PAD_LEFT);
                $break_resonse_time = $hours_b.':'.$minutes_b.':'.$seconds_b;
                //echo $break_resonse_time;
                
            $total = array('','','Total', $total_eme,$total_eme_non,$total_trans,$total_calls,$total_eme,$total_quality_score,$fetal_count,$resonse_time,$break_resonse_time);
            fputcsv($fp, $total);

            fclose($fp);
            exit;
        }
        if($post_reports['flt'] == 'reset'){
            $data=array();
            $data['submit_function'] = "load_shift_roster_sub_option_report_form";
            $data['title'] = "Shift Roaster Report";
            
            $this->output->add_to_position($this->load->view('frontend/reports/export_shiftroster_daily_reports_view', $data, TRUE), 'popup_div', TRUE);
           // $data['submit_function'] = "view_quality_master_report";
            //$data['sm'] = $this->colleagues_model->get_all_shiftmanager();
            //$data['purpose_calls'] = $this->call_model->get_all_child_purpose_of_calls();

            //$this->output->add_to_position($this->load->view('frontend/quality/quality_filter_view', $data, TRUE), 'Sub_report_block_fields', TRUE);
            $this->output->add_to_position('', 'Sub_date_report_block_fields', TRUE);
            $this->output->add_to_position('', 'list_table', TRUE);
        }
    }
    //Ambulance maintenance report
    
    function ambulance_maintenance_report()
    {
         $post_reports = $this->input->post();
        //var_dump($post_reports);die();
        $maintenance_type = $this->input->post('maintenance_type');
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;
        
        if ($post_reports['to_date'] != '') {

            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month'],'maintenance_type' => $maintenance_type);
        } else {

            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month'],'maintenance_type' => $maintenance_type);
        }
        $report_data = $this->ambmain_model->get_maintenance_report($report_args);
        //var_dump($report_data );die;
        $header = array('Sr.No','Ambulance No','Base Location','District','Maintenance Type', 'Off-Road Date', 'Remark','Ambulance Status','Added Date', 'On-Road Date');

        $main_file_name = strtotime($post_reports['from_date']);
        $filename = "maintenance_" . $main_file_name . ".csv";
        $this->output->set_focus_to = "inc_ref_id";
        if ($post_reports['reports'] == 'view') {

            $data['header'] = $header;
            $data['maintenance_data'] = $report_data;
            $data['maintenance_type'] = $maintenance_type;
            $data['report_args'] = $report_args;
            $data['submit_function'] = 'ambulance_maintenance_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/maintenance_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            //var_dump("hii");die();
            $filename = "ambulance_maintenance_report.csv";
            $fp = fopen('php://output', 'w');
            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $count = 1;

            foreach ($report_data as $row) {
                $data = array(
                    'Sr.No' => $count,
                    'Ambulance No' => $row->mt_amb_no,
                    'Base Location' => $row->mt_base_loc,
                    'District' => $row->dst_name,
                    'Maintenance Type' => $maintenance_type,
                    'OffRoad Date' => $row->mt_offroad_datetime,
                    'Remark' => $row->mt_remark,
                    'Ambulance Status' => $row->mt_ambulance_status,
                    'Added Date' => $row->added_date,
                    'Onroad Date' => $row->mt_onroad_datetime
                );
                fputcsv($fp, $data);
                $count++;
            }

            fclose($fp);
            exit;
        }
    }
   
    //Incidence dispacth report 

    function dispatch_incident_report() {

        $post_reports = $this->input->post();
        //var_dump($post_reports);die;
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {

            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {

            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }

        $report_data = $this->inc_model->get_dispatch_inc_by_report($report_args);

        $header = array('Sr.No', 'call Recieve Date/Time', 'Incident Id', 'Call Purpose', 'Caller Number', 'Caller Name', 'No of patients', 'Chief Complaint', 'Patient Name', 'Age', 'Gender', 'ERO Standard Remark', 'ERO Summary', 'Address', 'District', 'Ambulance No','Base Location', 'Call Disconnected Date/Time', 'Call Duration', 'Operated by', 'Status', 'Closure Status');


        $inc_file_name = strtotime($post_reports['from_date']);
        $filename = "incident_" . $inc_file_name . ".csv";
        if ($post_reports['reports'] == 'view') {

            $data['header'] = $header;
            $data['inc_data'] = $report_data;
            $data['report_args'] = $report_args;
            $data['submit_function'] = 'dispatch_incident_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/inc_report_view', $data, TRUE), 'list_table', TRUE);
        } else {

            $filename = "dispatch_incident_report.csv";
            $fp = fopen('php://output', 'w');
            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $count = 1;

            foreach ($report_data as $row) {

                if($row->inc_recive_time != '' ){
                    $d1= new DateTime($row->inc_recive_time);
                    
                
                $d2=new DateTime($row->inc_datetime);
                $duration=$d2->diff($d1);
                //var_dump($duration);die;
                    }
                   if($duration != NULL){
                   $duration = $duration->h . ':' . $duration->i . ':' . $duration->s;
                   $duration = date('H:i:s', strtotime($duration));
                   }
                   else{
                       $duration= "00:00:00";
                   }
                if ($row->incis_deleted == '0') {
                    $status = 'Active';
                } else if ($row->incis_deleted == '1') {
                    $status = 'Deleted';
                } else if ($row->incis_deleted == '2') {
                    $status = 'Terminated';
                }

                if ($row->inc_pcr_status == '0') {
                    $status1 = 'Not Done';
                } else if ($row->inc_pcr_status == '1') {
                    $status1 = 'Done';
                }
                if($row->inc_recive_time != NULL){
                    $add_date = date('Y-m-d', strtotime($row->inc_recive_time));
                     $add_time = date('H:i:s', strtotime($row->inc_recive_time));
                     $final_date= $add_date.'-'.$add_time;
                                 }
                                 else{
                                     $final_date= '';
                                 }
                 if($row->inc_datetime != NULL){
                     $add_date = date('Y-m-d', strtotime($row->inc_datetime));
                     $add_time = date('H:i:s', strtotime($row->inc_datetime));
                    $dis_final_date= $add_date.'-'.$add_time;
                            }
                             else{
                                  $dis_final_date= '';
                                     }
                                 
                $data = array(
                    'Sr.No' => $count,
                    'inc_datetime' => $final_date,
                    'inc_ref_id' => $row->inc_ref_id,
                    'pname' => $row->pname,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => $row->clr_fname . ' ' . $row->clr_lname,
                    'inc_patient_cnt' => $row->inc_patient_cnt,
                    'ct_type' => $row->ct_type,
                    'ptn_fname' => $row->ptn_fname,
                    'ptn_age' => $row->ptn_age,
                    'ptn_gender' => $row->ptn_gender,
                    'inc_ero_standard_summary' => $row->re_name,
                    'inc_ero_summary' => $row->inc_ero_summary,
                    'inc_address' => $row->inc_address,
                    'dst_name' => $row->dst_name,
                    'amb_rto_register_no' => $row->amb_rto_register_no,
                    'hp_name' => $row->hp_name,
                    'disconneted_date_time' => $dis_final_date,
                    'call_duration' => $duration,
                    'operator_id' => ucwords($row->inc_added_by),
                    'status' => $status,
                    'status1' => $status1
                );
                fputcsv($fp, $data);
                $count++;
            }

            fclose($fp);
            exit;
        }
    }

    //Incident report other Incident report

    function other_incident_report() {

        $post_reports = $this->input->post();
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {
            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }

        $report_data = $this->inc_model->get_other_inc_by_report($report_args);



        $header = array('Sr.No', 'call Recieve Date/Time', 'Incident Id', 'Call Purpose', 'Caller Number', 'Caller Name', 'ERO Standard remark', 'ERO remark', 'Call Disconected Date/Time', 'Call Duration', 'Operate by');


        $inc_file_name = strtotime($post_reports['from_date']);
        $filename = "incident_" . $inc_file_name . ".csv";
        if ($post_reports['reports'] == 'view') {

            $data['header'] = $header;
            $data['inc_data'] = $report_data;
            $data['report_args'] = $report_args;
            $this->output->add_to_position($this->load->view('frontend/erc_reports/other_inc_report_view', $data, TRUE), 'list_table', TRUE);
        } else {
            $filename = "other_incident_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);


            $data = array();
            $count = 1;
            foreach ($report_data as $row) {

                if($row->inc_datetime != NULL){
                    $add_date = date('Y-m-d', strtotime($row->inc_datetime));
                     $add_time = date('H:i:s', strtotime($row->inc_datetime));
                     $final_date= $add_date.'-'.$add_time;
                                 }
                                 else{
                                     $final_date= '';
                                 }
                 if($row->inc_recive_time != NULL){
                    $dis_add_date = date('Y-m-d', strtotime($row->inc_recive_time));
                     $dis_add_time = date('H:i:s', strtotime($row->inc_recive_time));
                     $final_date1= $dis_add_date.'-'.$dis_add_time;
                                 }
                                 else{
                                     $final_date1= '';
                                 }
                                
                         if($row->inc_recive_time != '' ){
                            $d1= new DateTime($row->inc_recive_time);
                                    
                                
                                $d2=new DateTime($row->inc_datetime);
                                $duration=$d2->diff($d1);
                                //var_dump($duration);die;
                                    }
                                   if($duration != NULL){
                                   $duration = $duration->h . ':' . $duration->i . ':' . $duration->s;
                                   $duration = date('H:i:s', strtotime($duration));
                                   }
                                   else{
                                       $duration= "00:00:00";
                                   }

                $data = array(
                    'Count' => $count,
                    'inc_datetime' => $final_date1,
                    'inc_ref_id' => $row->inc_ref_id,
                    'pname' => $row->pname,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_fullname' => $row->clr_fname.' '.$row->clr_lname,
                    're_name' => $row->re_name,
                    'inc_ero_summary' => $row->inc_ero_summary,
                    'dis_datetime' => $final_date,
                    'inc_dispatch_time' => $duration,
                    'operator_id' => ucwords($row->inc_added_by),
                );

                fputcsv($fp, $data);
                $count++;
            }

            fclose($fp);
            exit;
        }
    }
    function createdateRange($start, $end, $format = 'Y-m-d') {
        $start  = new DateTime($start);
        $end    = new DateTime($end);
        $invert = $start > $end;

        $dates = array();
        $dates[] = $start->format($format);
        while ($start != $end) {
            $start->modify(($invert ? '-' : '+') . '1 day');
            $dates[] = $start->format($format);
        }
        return $dates;
    }
    function district_wise_patient_served(){
        $post_reports = $this->input->post();
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));
        $yesterday = date( 'Y-m-d', strtotime( $from_date . ' -1 day' ) );
        $report_args = array('from_date' => date('Y-m-d', strtotime($from_date)),
                'system'=> $this->input->post('system')
            );
        
        $data['submit_funtion'] = "district_wise_patient_served";
        
        $header = array("District","On $yesterday","Month Total","Since Launch");
        
        $get_district = $this->inc_model->get_district_name();
       // var_dump($get_district);
        $patient_data = array();
        foreach($get_district as $district){  
            
            $today_args = array('from_date' => $yesterday,
                'to_date' => $yesterday,
                'system'=> $this->input->post('system'),
                'district_id'=>$district->dst_code
            );
          //  var_dump($today_args);die;
            $get_today_patient = $this->inc_model->get_district_patient_served($today_args);
            
            $years = date('Y', strtotime($post_reports['from_date']));
            $month= date('m', strtotime($post_reports['from_date']));
            $current_date =  $years.'-'.$month.'-'.'01';
            

            
            $month_args = array('from_date' => $current_date,
                'to_date' =>  date('Y-m-t', strtotime($years.'-'.$month)),
                'system'=> $this->input->post('system'),
                'district_id'=>$district->dst_code
            );
            //var_dump($month_args);die;
            $get_month_patient = $this->inc_model->get_district_patient_served($month_args);
            
            $total_args = array(
                'system'=> $this->input->post('system'),
                'district_id'=>$district->dst_code
            );
            //var_dump($total_args);die;

            $get_total_patient = $this->inc_model->get_district_patient_served($total_args);
            
            $patient_data[]=array('dist_name'=>$district->dst_name,
                                  'today'=>$get_today_patient[0]->total_patient,
                                  'month'=>$get_month_patient[0]->total_patient,
                                  'total'=>$get_total_patient[0]->total_patient); 
                                  //var_dump($patient_data);die;
        }

       if ($post_reports['reports'] == 'view') {       
            $data['header'] = $header;
            $data['patient_data'] = $patient_data;
            $data['report_args'] = $report_args;
            
            $this->output->add_to_position($this->load->view('frontend/erc_reports/district_wise_patient_served', $data, TRUE), 'list_table', TRUE);
            
        }else{
             // var_dump($post_reports); 
            $filename = "district_wise_patient_served.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv; charset=UTF-8');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);
                
            $today =0;
            $month =0;
            $total =0;
            foreach($patient_data as $inc){
                    // var_dump($inc);
                    
                $data = array ('dist_name'=>$inc['dist_name'], 
                'today'=>$inc['today'], 
                'month'=>$inc['month'], 
                'total'=>$inc['total']);
                
                $today=$today+$inc['today'];
                $month=$month+$inc['month'];
                $total=$total+$inc['total'];
    
                fputcsv($fp, $data);
                $count++;
           
            }
//var_dump($total_args);

            $total_count = array('Total',$today,$month,$total);
            fputcsv($fp, $total_count);
                
            fclose($fp);
            exit;
           
        }
            
                 
    }
    function call_count_aht_report(){
         $post_reports = $this->input->post();
         
         
        $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                  
            );
        if($post_reports['clg_group'] != ''){
            $report_args['clg_group'] = $post_reports['clg_group'];
        }else{
            $report_args['user_group'] = 'UG-ERO,UG-ERO-102';
        }
        
        
            //var_dump($this->input->post());die;
        $header = array("ERO Name","Avaya ID","Process 102/108","EM Call Count","EM Call AHT","Hospital to hospital Call Count","Hospital to hospital Call AHT","Non EM Call Count","Non EM Call AHT");
        
        //$get_district = $this->inc_model->get_district_name();
        $get_eros_data = $this->colleagues_model->get_clg_data($report_args);
        

//var_dump($get_eros_data);die;
    $ero_data = array();
   // $inc_data = array();
    foreach($get_eros_data as $erodata){
         
        $ero_name = $erodata->clg_first_name." ".$erodata->clg_mid_name." ".$erodata->clg_last_name;
         
        if($erodata->clg_group == 'UG-ERO'){ $system = '108';}else { $system =  '102';}
         
        $arg_data = array('inc_added_by'=>$erodata->clg_ref_id,
             'from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                 'inc_type'=>"NON_MCI','AD_SUP_REQ','DROP_BACK','MCI','EMT_MED_AD','PREGANCY_CALL','VIP_CALL','Child_CARE_CALL");
        
        $hosp_data = array('inc_added_by'=>$erodata->clg_ref_id,
             'from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                 'inc_type'=>'IN_HO_P_TR');
        
        $arg_nem_data = array('inc_added_by'=>$erodata->clg_ref_id,
                'from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])));
        
        
        
        $em_call_res = $this->inc_model->get_total_by_call_type_inc($arg_data);
        
        $hosp_count = $this->inc_model->get_total_by_call_type_inc($hosp_data);

        $nem_call_res = $this->inc_model->get_total_noneme_calls($arg_nem_data);
        
        $total_count_eme = get_inc_total_by_user($arg_data);
        $total_count_hosp = get_inc_total_by_user($hosp_data);
        $total_count_nem = get_nonems_total_by_user($arg_nem_data);
        //var_dump($hosp_count);
        
        $em_call_total = "0";
        foreach($em_call_res as $em_call){
            $inc_recive_time='0';
            if($em_call->inc_recive_time != '0000-00-00 00:00:00'){
                $inc_recive_time = strtotime($em_call->inc_recive_time);
            }
            $inc_datetime = strtotime($em_call->inc_datetime);
            $time_diff = $inc_datetime - $inc_recive_time;
            if ($time_diff > 0) {
                $em_call_total += $time_diff;
            }
        }
        if($total_count_eme > 0){
            $em_call_total = $em_call_total/$total_count_eme;
        }
        
        $e_H = floor($em_call_total / 3600);
        $e_i = ($em_call_total / 60) % 60;
        $e_s = $em_call_total % 60;
        $em_time = sprintf("%02d:%02d:%02d", $e_H, $e_i, $e_s);
        $em_total_time = $em_time;
        
        $hosp_time_diff = "0";
        //var_dump($hosp_count);
        foreach($hosp_count as $hosp){
            $hosp_recive_time='0';
            if($hosp->inc_recive_time != '0000-00-00 00:00:00'){
                $hosp_recive_time = strtotime($hosp->inc_recive_time);
            }
            $hosp_datetime = strtotime($hosp->inc_datetime);
            $hosp_time_res = $hosp_datetime - $hosp_recive_time;
            //var_dump($hosp_time_res);
            if ($hosp_time_res > 0) {
                $hosp_time_diff += $hosp_time_res;
            }
            
        }
        if($hosp_time_diff > 0){
            $hosp_time_diff = $hosp_time_diff/$total_count_hosp;
        }
      //  var_dump($hosp_time_diff);
        
        $h_H = floor($hosp_time_diff / 3600);
        $h_i = ($hosp_time_diff / 60) % 60;
        $h_s = $hosp_time_diff % 60;
        $hosp_time = sprintf("%02d:%02d:%02d", $h_H, $h_i, $h_s);
        $hosp_total_time = $hosp_time;
        
        
        $nem_time_diff = "0";
        foreach($nem_call_res as $nem_call){
            $nem_recive_time='0';
            if($em_call->inc_recive_time != '0000-00-00 00:00:00'){
                $nem_recive_time = strtotime($nem_call->inc_recive_time);
            }
            $nem_datetime = strtotime($nem_call->inc_datetime);
            $nem_diff = $nem_datetime - $nem_recive_time;
            if ($nem_diff > 0) {
                $nem_time_diff += $nem_diff;
            }
        }
        if($total_count_nem > 0 ){
            $nem_time_diff = $nem_time_diff/$total_count_nem;
        }

        $H = floor($nem_time_diff / 3600);
        $i = ($nem_time_diff / 60) % 60;
        $s = $nem_time_diff % 60;
        $nem_time = sprintf("%02d:%02d:%02d", $H, $i, $s);
        $nem_total_time = $nem_time;
        
        $ero_data[] = array('ero_name'=>$ero_name,
                            'clg_avaya_id' => $erodata->clg_avaya_id ,
                            'clg_group' => $system,
                            'em_call_count'=>$total_count_eme,
                            'em_call_total'=>$em_total_time,
                            'hosp_count'=>$total_count_hosp,
                            'hosp_time_diff'=>$hosp_total_time,
                            'nem_call_count'=>$total_count_nem,
                            'nem_time_diff'=>$nem_total_time
                             );                   
    }
     

       if ($post_reports['reports'] == 'view') {       
            $data['header'] = $header;
            $data['patient_data'] = $ero_data;
            $data['report_args'] = $report_args;
            $data['submit_funtion'] = "call_count_aht_report";

            $this->output->add_to_position($this->load->view('frontend/erc_reports/aht_report_view', $data, TRUE), 'list_table', TRUE);
            
        }else{
            
            $filename = "call_count_aht_report.csv";
            $fp = fopen('php://output', 'w');

            header('Content-type: application/csv; charset=UTF-8');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);
                

            foreach($ero_data as $inc){
                
                $data = array ('dist_name'=>ucwords($inc['ero_name']), 
                                'clg_avaya_id'=>$inc['clg_avaya_id'], 
                                'clg_group'=>$inc['clg_group'], 
                                'em_call_count'=>$inc['em_call_count'],
                                'em_call_total'=>$inc['em_call_total']?$inc['em_call_total']:0,
                                'hosp_count'=>$inc['hosp_count'],
                                'hosp_time_diff'=>$inc['hosp_time_diff']?$inc['hosp_time_diff']:0,
                                'nem_call_count'=>$inc['nem_call_count'],
                                'nem_time_diff'=>$inc['nem_time_diff']?$inc['nem_time_diff']:0,
                    
                    );
                
    
                fputcsv($fp, $data);
                $count++;
           
            }
                
            fclose($fp);
            exit;
           
        } 
    }
    
    function unable_to_dispatch_report(){
         $post_reports = $this->input->post();
        //var_dump($post_reports);die;
        $from_date = date('Y-m-d', strtotime($post_reports['from_date']));

        $base_month = $this->common_model->get_base_month($from_date);
        $this->post['base_month'] = $base_month[0]->months;

        if ($post_reports['to_date'] != '') {

            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-d', strtotime($post_reports['to_date'])),
                'base_month' => $this->post['base_month']);
        } else {

            $report_args = array('from_date' => date('Y-m-d', strtotime($post_reports['from_date'])),
                'to_date' => date('Y-m-t', strtotime($post_reports['from_date'])),
                'base_month' => $this->post['base_month']);
        }

        $report_data = $this->inc_model->get_unable_to_dispatch_report($report_args);

        $header = array('Incident ID','Call Receive Date /Time','Call End Date / Time','Call Duration','Caller Name','Caller Number','Current District','Current Tehsil','Current Hospital','Home District','ERO Summary','ERO Note','Ambulance-1 No','Ambulance-1 Base Location','Ambulance-1 Remark','Ambulance-2  No','Ambulance-2 Base Location','Ambulance-2 Remark','Ambulance-3  No','Ambulance-3 Base Location','Ambulance-3 Remark','Handled by ERO','ERO Name');


        $inc_file_name = strtotime($post_reports['from_date']);
        $filename = "incident_" . $inc_file_name . ".csv";
        if ($post_reports['reports'] == 'view') {

            $data['header'] = $header;
            $data['inc_data'] = $report_data;
            $data['report_args'] = $report_args;
            $data['submit_function'] = 'unable_to_dispatch_report';
            $this->output->add_to_position($this->load->view('frontend/erc_reports/unable_to_dispatch_report_report_view', $data, TRUE), 'list_table', TRUE);
            
        } else {

            $filename = "unable_to_dispatch_report.csv";
            $fp = fopen('php://output', 'w');
            header('Content-type: application/csv');
            header('Content-Disposition: attachment; filename=' . $filename);
            fputcsv($fp, $header);

            $count = 1;

            foreach ($report_data as $row) {
                
                if($row->inc_recive_time != '' ){
            $d1= new DateTime($row->inc_recive_time);
            
        
        $d2=new DateTime($row->inc_datetime);
        $duration=$d2->diff($d1);
        //var_dump($duration);die;
            }

                if($duration != NULL){
                $duration = $duration->h . ':' . $duration->i . ':' . $duration->s;
                $duration = date('H:i:s', strtotime($duration));
                }
                else{
                    $duration= "00:00:00";
                }
                $unable_to_dispatch_amb = get_unable_to_dispatch_amb($row->inc_ref_id);
                $amb[0] = "";
                $hp_name[0]= "";
                $enable_remark[0]= "";
                $amb[1]= "";
                $hp_name[1]= "";
                $enable_remark[1]= "";
                $amb[2]= "";
                $hp_name[2]= "";
                $enable_remark[2]= "";
                foreach($unable_to_dispatch_amb as $key=>$unable){
                    $amb[$key] = $unable->amb_reg_no;
                    $hp_name[$key] =$unable->hp_name; 
                    $enable_remark[$key] =get_ero_remark($unable->enable_remark); 
                 } 

                $current_district = "";
                if($row->current_district  != ''){ 
                    $current_district = get_district_by_id($row->current_district);   
                }
                if($row->inc_tahshil_id  != ''){ $tahshil_id = get_tehsil_by_id($row->inc_tahshil_id); }
                $back_hospital = "";       
                if($row->inc_back_hospital != ''){
                    $hospital = get_hospital_by_id($row->inc_back_hospital);
                    $back_hospital=  $hospital[0]->hp_name;
                }
                $home_district_id = "";
                if($row->home_district_id  != ''){ $home_district_id = get_district_by_id($row->home_district_id); }
                $inc_ero_standard_summary ="";
                if($row->inc_ero_standard_summary != ''){
                    $inc_ero_standard_summary = get_ero_remark($row->inc_ero_standard_summary);  
                }
                $clg_id = get_clg_data_by_ref_id($row->inc_added_by);
                                 
                $data = array(
                   // 'Sr.No' => $count,
                    'inc_ref_id' => $row->inc_ref_id,
                    'inc_recive_time' => $row->inc_recive_time,
                    'inc_datetime' => $row->inc_datetime,
                    'duration' => $duration,
                    'clr_fullname' => $row->clr_fname . ' ' . $row->clr_lname,
                    'clr_mobile' => $row->clr_mobile,
                    'clr_mobile' => $row->clr_mobile,
                    'current_district'=>$current_district,
                    'tahshil_id'=>$tahshil_id,
                    'back_hospital'=>$back_hospital,
                    'home_district_id'=>$home_district_id,
                    'inc_ero_standard_summary'=>$inc_ero_standard_summary,
                    'inc_ero_summary'=>$row->inc_ero_summary,
                    'amb1' => $amb[0],
                    'hp_name1' => $hp_name[0],
                    'enable_remark1' => $enable_remark[0],
                    'amb2' => $amb[1],
                    'hp_name2' => $hp_name[1],
                    'enable_remark2' => $enable_remark[1],
                    'amb3' => $amb[2],
                    'hp_name3' => $hp_name[2],
                    'enable_remark3' => $enable_remark[2],
                    'inc_ero_summary' => $row->inc_ero_summary,
                    'operator_id' => ucwords($row->inc_added_by),
                    'operator_name'=>$clg_id[0]->clg_first_name.' '.$clg_id[0]->clg_last_name
                );
                fputcsv($fp, $data);
                $count++;
            }

            fclose($fp);
            exit;
        }
    }

}